{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState as $6imuh$useState, useRef as $6imuh$useRef, useCallback as $6imuh$useCallback } from \"react\";\nfunction $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue, onChange) {\n  var _ref = (0, $6imuh$useState)(value || defaultValue),\n    _ref2 = _slicedToArray(_ref, 2),\n    stateValue = _ref2[0],\n    setStateValue = _ref2[1];\n  var ref = (0, $6imuh$useRef)(value !== undefined);\n  var wasControlled = ref.current;\n  var isControlled = value !== undefined;\n  var stateRef = (0, $6imuh$useRef)(stateValue);\n  if (wasControlled !== isControlled) console.warn(\"WARN: A component changed from \" + (wasControlled ? \"controlled\" : \"uncontrolled\") + \" to \" + (isControlled ? \"controlled\" : \"uncontrolled\") + \".\");\n  ref.current = isControlled;\n  var setValue = (0, $6imuh$useCallback)(function (value) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    var onChangeCaller = function onChangeCaller(value) {\n      if (onChange) {\n        for (var _len2 = arguments.length, onChangeArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          onChangeArgs[_key2 - 1] = arguments[_key2];\n        }\n        if (!Object.is(stateRef.current, value)) onChange.apply(void 0, [value].concat(onChangeArgs));\n      }\n      if (!isControlled) stateRef.current = value;\n    };\n    if (typeof value === \"function\") {\n      console.warn(\"We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320\");\n      var updateFunction = function updateFunction(oldValue) {\n        for (var _len3 = arguments.length, functionArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          functionArgs[_key3 - 1] = arguments[_key3];\n        }\n        var interceptedValue = value.apply(void 0, [isControlled ? stateRef.current : oldValue].concat(functionArgs));\n        onChangeCaller.apply(void 0, [interceptedValue].concat(args));\n        if (!isControlled) return interceptedValue;\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) setStateValue(value);\n      onChangeCaller.apply(void 0, [value].concat(args));\n    }\n  }, [isControlled, onChange]);\n  if (isControlled) stateRef.current = value;else value = stateValue;\n  return [value, setValue];\n}\nfunction $9446cca9a3875146$export$7d15b64cf5a3a4c4(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  var newValue = Math.min(Math.max(value, min), max);\n  return newValue;\n}\nfunction $9446cca9a3875146$export$cb6e0bb50bc19463(value, min, max, step) {\n  var remainder = (value - (isNaN(min) ? 0 : min)) % step;\n  var snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;\n  if (!isNaN(min)) {\n    if (snappedValue < min) snappedValue = min;else if (!isNaN(max) && snappedValue > max) snappedValue = min + Math.floor((max - min) / step) * step;\n  } else if (!isNaN(max) && snappedValue > max) snappedValue = Math.floor(max / step) * step;\n  var string = step.toString();\n  var index = string.indexOf(\".\");\n  var precision = index >= 0 ? string.length - index : 0;\n  if (precision > 0) {\n    var pow = Math.pow(10, precision);\n    snappedValue = Math.round(snappedValue * pow) / pow;\n  }\n  return snappedValue;\n}\nfunction $9446cca9a3875146$export$b6268554fba451f(value, digits) {\n  var base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  var pow = Math.pow(base, digits);\n  return Math.round(value * pow) / pow;\n}\nexport { $458b0a5536c1a7cf$export$40bfa8c7b0832715 as useControlledState, $9446cca9a3875146$export$7d15b64cf5a3a4c4 as clamp, $9446cca9a3875146$export$cb6e0bb50bc19463 as snapValueToStep, $9446cca9a3875146$export$b6268554fba451f as toFixedNumber };","map":{"version":3,"mappings":";;AAcO,SAASA,0CACdC,KAAQ,EACRC,YAAe,EACfC,QAA4C,EACF;EAC1C,WAAkC,mBAAO,EAAEF,SAASC;IAAA;IAA/CE;IAAYC;EACjB,IAAIC,MAAM,iBAAK,EAAEL,UAAUM;EAC3B,IAAIC,gBAAgBF,IAAIG,OAAO;EAC/B,IAAIC,eAAeT,UAAUM;EAE7B,IAAII,WAAW,iBAAK,EAAEP;EACtB,IAAII,kBAAkBE,cACpBE,QAAQC,IAAI,sCAAmCL,gBAAgB,eAAe,cAAc,cAAOE,eAAe,eAAe,cAAc,QAAG;EAGpJJ,IAAIG,OAAO,GAAGC;EAEd,IAAII,WAAW,sBAAU,EAAE,UAACb,OAAmB;IAAA,kCAATc;MAAAA;IAAA;IACpC,IAAIC,iBAAiB,SAAjBA,eAAkBf,OAA2B;MAC/C,IAAIE,UACF;QAAA,mCAF4Bc;UAAAA;QAAA;QAE5B,IAAI,CAACC,OAAOC,EAAE,CAACR,SAASF,OAAO,EAAER,QAC/BE,wBAASF,cAAUgB;MACrB;MAEF,IAAI,CAACP,cACHC,SAASF,OAAO,GAAGR;IAEvB;IAEA,IAAI,OAAOA,UAAU,YAAY;MAC/BW,QAAQC,IAAI,CAAC;MAMb,IAAIO,iBAAiB,SAAjBA,eAAkBC,UAA8B;QAAA,mCAAjBC;UAAAA;QAAA;QACjC,IAAIC,mBAAmBtB,qBAAMS,eAAeC,SAASF,OAAO,GAAGY,QAAQ,SAAKC;QAC5EN,8BAAeO,yBAAqBR;QACpC,IAAI,CAACL,cACH,OAAOa;QAET,OAAOF;MACT;MACAhB,cAAce;IAChB,OAAO;MACL,IAAI,CAACV,cACHL,cAAcJ;MAEhBe,8BAAef,cAAUc;IAC3B;EACF,GAAG,CAACL,cAAcP,SAAS;EAG3B,IAAIO,cACFC,SAASF,OAAO,GAAGR,WAEnBA,QAAQG;EAGV,OAAO,CAACH,OAAOa,SAAS;AAC1B;AC5DA,SAAgBU,0CAAMvB,KAAa,EAA2D;EAAA,IAAzDwB,0EAAc,CAACC,QAAQ;EAAA,IAAEC,0EAAcD,QAAQ;EAClF,IAAIE,WAAWC,KAAKJ,GAAG,CAACI,KAAKF,GAAG,CAAC1B,OAAOwB,MAAME;EAC9C,OAAOC;AACT;AAEO,SAASE,0CAAgB7B,KAAa,EAAEwB,GAAW,EAAEE,GAAW,EAAEI,IAAY,EAAU;EAC7F,IAAIC,YAAa,CAAC/B,SAASgC,MAAMR,OAAO,IAAIA,GAAG,KAAKM;EACpD,IAAIG,eAAeL,KAAKM,GAAG,CAACH,aAAa,KAAKD,OAC1C9B,QAAQ4B,KAAKO,IAAI,CAACJ,cAAcD,OAAOF,KAAKM,GAAG,CAACH,UAAS,IACzD/B,QAAQ+B,SAAS;EAErB,IAAI,CAACC,MAAMR,MAAM;IACf,IAAIS,eAAeT,KACjBS,eAAeT,SACV,IAAI,CAACQ,MAAMN,QAAQO,eAAeP,KACvCO,eAAeT,MAAMI,KAAKQ,KAAK,CAAC,CAACV,MAAMF,GAAE,IAAKM,QAAQA;EAE1D,OAAO,IAAI,CAACE,MAAMN,QAAQO,eAAeP,KACvCO,eAAeL,KAAKQ,KAAK,CAACV,MAAMI,QAAQA;EAI1C,IAAIO,SAASP,KAAKQ,QAAQ;EAC1B,IAAIC,QAAQF,OAAOG,OAAO,CAAC;EAC3B,IAAIC,YAAYF,SAAS,IAAIF,OAAOK,MAAM,GAAGH,QAAQ,CAAC;EAEtD,IAAIE,YAAY,GAAG;IACjB,IAAIE,MAAMf,KAAKe,GAAG,CAAC,IAAIF;IACvBR,eAAeL,KAAKgB,KAAK,CAACX,eAAeU,OAAOA;EAClD;EAEA,OAAOV;AACT;AAGO,SAASY,yCAAc7C,KAAa,EAAE8C,MAAc,EAA6B;EAAA,IAA3BC,2EAAe,EAAE;EAC5E,IAAMJ,MAAMf,KAAKe,GAAG,CAACI,MAAMD;EAE3B,OAAOlB,KAAKgB,KAAK,CAAC5C,QAAQ2C,OAAOA;AACnC","names":["$458b0a5536c1a7cf$export$40bfa8c7b0832715","value","defaultValue","onChange","stateValue","setStateValue","ref","undefined","wasControlled","current","isControlled","stateRef","console","warn","setValue","args","onChangeCaller","onChangeArgs","Object","is","updateFunction","oldValue","functionArgs","interceptedValue","$9446cca9a3875146$export$7d15b64cf5a3a4c4","min","Infinity","max","newValue","Math","$9446cca9a3875146$export$cb6e0bb50bc19463","step","remainder","isNaN","snappedValue","abs","sign","floor","string","toString","index","indexOf","precision","length","pow","round","$9446cca9a3875146$export$b6268554fba451f","digits","base"],"sources":["packages/@react-stately/utils/src/useControlledState.ts","packages/@react-stately/utils/src/number.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useRef, useState} from 'react';\n\nexport function useControlledState<T>(\n  value: T,\n  defaultValue: T,\n  onChange: (value: T, ...args: any[]) => void\n): [T, (value: T, ...args: any[]) => void]  {\n  let [stateValue, setStateValue] = useState(value || defaultValue);\n  let ref = useRef(value !== undefined);\n  let wasControlled = ref.current;\n  let isControlled = value !== undefined;\n  // Internal state reference for useCallback\n  let stateRef = useRef(stateValue);\n  if (wasControlled !== isControlled) {\n    console.warn(`WARN: A component changed from ${wasControlled ? 'controlled' : 'uncontrolled'} to ${isControlled ? 'controlled' : 'uncontrolled'}.`);\n  }\n\n  ref.current = isControlled;\n\n  let setValue = useCallback((value, ...args) => {\n    let onChangeCaller = (value, ...onChangeArgs) => {\n      if (onChange) {\n        if (!Object.is(stateRef.current, value)) {\n          onChange(value, ...onChangeArgs);\n        }\n      }\n      if (!isControlled) {\n        stateRef.current = value;\n      }\n    };\n\n    if (typeof value === 'function') {\n      console.warn('We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320');\n      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n      let updateFunction = (oldValue, ...functionArgs) => {\n        let interceptedValue = value(isControlled ? stateRef.current : oldValue, ...functionArgs);\n        onChangeCaller(interceptedValue, ...args);\n        if (!isControlled) {\n          return interceptedValue;\n        }\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) {\n        setStateValue(value);\n      }\n      onChangeCaller(value, ...args);\n    }\n  }, [isControlled, onChange]);\n\n  // If a controlled component's value prop changes, we need to update stateRef\n  if (isControlled) {\n    stateRef.current = value;\n  } else {\n    value = stateValue;\n  }\n\n  return [value, setValue];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/**\n * Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.\n */\nexport function clamp(value: number, min: number = -Infinity, max: number = Infinity): number {\n  let newValue = Math.min(Math.max(value, min), max);\n  return newValue;\n}\n\nexport function snapValueToStep(value: number, min: number, max: number, step: number): number {\n  let remainder = ((value - (isNaN(min) ? 0 : min)) % step);\n  let snappedValue = Math.abs(remainder) * 2 >= step\n    ? value + Math.sign(remainder) * (step - Math.abs(remainder))\n    : value - remainder;\n\n  if (!isNaN(min)) {\n    if (snappedValue < min) {\n      snappedValue = min;\n    } else if (!isNaN(max) && snappedValue > max) {\n      snappedValue = min + Math.floor((max - min) / step) * step;\n    }\n  } else if (!isNaN(max) && snappedValue > max) {\n    snappedValue = Math.floor(max / step) * step;\n  }\n\n  // correct floating point behavior by rounding to step precision\n  let string = step.toString();\n  let index = string.indexOf('.');\n  let precision = index >= 0 ? string.length - index : 0;\n\n  if (precision > 0) {\n    let pow = Math.pow(10, precision);\n    snappedValue = Math.round(snappedValue * pow) / pow;\n  }\n\n  return snappedValue;\n}\n\n/* Takes a value and rounds off to the number of digits. */\nexport function toFixedNumber(value: number, digits: number, base: number = 10): number {\n  const pow = Math.pow(base, digits);\n\n  return Math.round(value * pow) / pow;\n}\n"]},"metadata":{},"sourceType":"module"}