{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useRef as $eCAIO$useRef, useEffect as $eCAIO$useEffect, useMemo as $eCAIO$useMemo } from \"react\";\nimport { getFocusableTreeWalker as $eCAIO$getFocusableTreeWalker, focusSafely as $eCAIO$focusSafely } from \"@react-aria/focus\";\nimport { focusWithoutScrolling as $eCAIO$focusWithoutScrolling, useEvent as $eCAIO$useEvent, scrollIntoView as $eCAIO$scrollIntoView, mergeProps as $eCAIO$mergeProps, isAppleDevice as $eCAIO$isAppleDevice, isMac as $eCAIO$isMac } from \"@react-aria/utils\";\nimport { useLocale as $eCAIO$useLocale, useCollator as $eCAIO$useCollator } from \"@react-aria/i18n\";\nimport { usePress as $eCAIO$usePress, useLongPress as $eCAIO$useLongPress } from \"@react-aria/interactions\";\nfunction $feb5ffebff200149$export$d3e3bd3e26688c04(e) {\n  return (0, $eCAIO$isAppleDevice)() ? e.altKey : e.ctrlKey;\n}\nfunction $feb5ffebff200149$export$16792effe837dba3(e) {\n  if ((0, $eCAIO$isMac)()) return e.metaKey;\n  return e.ctrlKey;\n}\nvar $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000;\nfunction $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {\n  var keyboardDelegate = options.keyboardDelegate,\n    selectionManager = options.selectionManager,\n    onTypeSelect = options.onTypeSelect;\n  var state = (0, $eCAIO$useRef)({\n    search: \"\",\n    timeout: null\n  }).current;\n  var onKeyDown = function onKeyDown(e) {\n    var character = $fb3050f43d946246$var$getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) return;\n    if (character === \" \" && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!(\"continuePropagation\" in e)) e.stopPropagation();\n    }\n    state.search += character;\n    var key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n    if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) onTypeSelect(key);\n    }\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function () {\n      state.search = \"\";\n    }, $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n  return {\n    typeSelectProps: {\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\nfunction $fb3050f43d946246$var$getStringForKey(key) {\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;\n  return \"\";\n}\nfunction $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {\n  var manager = options.selectionManager,\n    delegate = options.keyboardDelegate,\n    ref = options.ref,\n    _options$autoFocus = options.autoFocus,\n    autoFocus = _options$autoFocus === void 0 ? false : _options$autoFocus,\n    _options$shouldFocusW = options.shouldFocusWrap,\n    shouldFocusWrap = _options$shouldFocusW === void 0 ? false : _options$shouldFocusW,\n    _options$disallowEmpt = options.disallowEmptySelection,\n    disallowEmptySelection = _options$disallowEmpt === void 0 ? false : _options$disallowEmpt,\n    _options$disallowSele = options.disallowSelectAll,\n    disallowSelectAll = _options$disallowSele === void 0 ? false : _options$disallowSele,\n    _options$selectOnFocu = options.selectOnFocus,\n    selectOnFocus = _options$selectOnFocu === void 0 ? manager.selectionBehavior === \"replace\" : _options$selectOnFocu,\n    _options$disallowType = options.disallowTypeAhead,\n    disallowTypeAhead = _options$disallowType === void 0 ? false : _options$disallowType,\n    shouldUseVirtualFocus = options.shouldUseVirtualFocus,\n    _options$allowsTabNav = options.allowsTabNavigation,\n    allowsTabNavigation = _options$allowsTabNav === void 0 ? false : _options$allowsTabNav,\n    isVirtualized = options.isVirtualized,\n    _options$scrollRef = options.scrollRef,\n    scrollRef = _options$scrollRef === void 0 ? ref : _options$scrollRef;\n  var _ref = (0, $eCAIO$useLocale)(),\n    direction = _ref.direction;\n  var onKeyDown = function onKeyDown(e) {\n    if (e.altKey && e.key === \"Tab\") e.preventDefault();\n    if (!ref.current.contains(e.target)) return;\n    var navigateToKey = function navigateToKey(key, childFocus) {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n        if (e.shiftKey && manager.selectionMode === \"multiple\") manager.extendSelection(key);else if (selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.replaceSelection(key);\n      }\n    };\n    switch (e.key) {\n      case \"ArrowDown\":\n        if (delegate.getKeyBelow) {\n          var _delegate_getFirstKey, _delegate_getFirstKey1;\n          e.preventDefault();\n          var nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"ArrowUp\":\n        if (delegate.getKeyAbove) {\n          var _delegate_getLastKey, _delegate_getLastKey1;\n          e.preventDefault();\n          var nextKey1 = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate);\n          if (nextKey1 == null && shouldFocusWrap) nextKey1 = (_delegate_getLastKey1 = delegate.getLastKey) === null || _delegate_getLastKey1 === void 0 ? void 0 : _delegate_getLastKey1.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey1);\n        }\n        break;\n      case \"ArrowLeft\":\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          var nextKey2 = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey2, direction === \"rtl\" ? \"first\" : \"last\");\n        }\n        break;\n      case \"ArrowRight\":\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          var nextKey3 = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey3, direction === \"rtl\" ? \"last\" : \"first\");\n        }\n        break;\n      case \"Home\":\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          var firstKey = delegate.getFirstKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));\n          manager.setFocusedKey(firstKey);\n          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === \"multiple\") manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);\n        }\n        break;\n      case \"End\":\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          var lastKey = delegate.getLastKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));\n          manager.setFocusedKey(lastKey);\n          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === \"multiple\") manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);\n        }\n        break;\n      case \"PageDown\":\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          var nextKey4 = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey4);\n        }\n        break;\n      case \"PageUp\":\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          var nextKey5 = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey5);\n        }\n        break;\n      case \"a\":\n        if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && manager.selectionMode === \"multiple\" && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case \"Escape\":\n        e.preventDefault();\n        if (!disallowEmptySelection) manager.clearSelection();\n        break;\n      case \"Tab\":\n        if (!allowsTabNavigation) {\n          if (e.shiftKey) ref.current.focus();else {\n            var walker = (0, $eCAIO$getFocusableTreeWalker)(ref.current, {\n              tabbable: true\n            });\n            var next;\n            var last;\n            do {\n              last = walker.lastChild();\n              if (last) next = last;\n            } while (last);\n            if (next && !next.contains(document.activeElement)) (0, $eCAIO$focusWithoutScrolling)(next);\n          }\n          break;\n        }\n    }\n  };\n  var scrollPos = (0, $eCAIO$useRef)({\n    top: 0,\n    left: 0\n  });\n  (0, $eCAIO$useEvent)(scrollRef, \"scroll\", isVirtualized ? null : function () {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n  var onFocus = function onFocus(e) {\n    if (manager.isFocused) {\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    }\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n    if (manager.focusedKey == null) {\n      var navigateToFirstKey = function navigateToFirstKey(key) {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) manager.replaceSelection(key);\n        }\n      };\n      var relatedTarget = e.relatedTarget;\n      var _manager_lastSelectedKey, _manager_firstSelectedKey;\n      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_manager_lastSelectedKey = manager.lastSelectedKey) !== null && _manager_lastSelectedKey !== void 0 ? _manager_lastSelectedKey : delegate.getLastKey());else navigateToFirstKey((_manager_firstSelectedKey = manager.firstSelectedKey) !== null && _manager_firstSelectedKey !== void 0 ? _manager_firstSelectedKey : delegate.getFirstKey());\n    } else if (!isVirtualized) {\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n      var element = scrollRef.current.querySelector(\"[data-key=\\\"\" + manager.focusedKey + \"\\\"]\");\n      if (element) {\n        (0, $eCAIO$focusWithoutScrolling)(element);\n        (0, $eCAIO$scrollIntoView)(scrollRef.current, element);\n      }\n    }\n  };\n  var onBlur = function onBlur(e) {\n    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);\n  };\n  var autoFocusRef = (0, $eCAIO$useRef)(autoFocus);\n  (0, $eCAIO$useEffect)(function () {\n    if (autoFocusRef.current) {\n      var focusedKey = null;\n      if (autoFocus === \"first\") focusedKey = delegate.getFirstKey();\n      if (autoFocus === \"last\") focusedKey = delegate.getLastKey();\n      var selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) focusedKey = selectedKeys.values().next().value;\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n      if (focusedKey == null && !shouldUseVirtualFocus) (0, $eCAIO$focusSafely)(ref.current);\n    }\n    autoFocusRef.current = false;\n  }, []);\n  (0, $eCAIO$useEffect)(function () {\n    if (!isVirtualized && manager.focusedKey && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {\n      var element = scrollRef.current.querySelector(\"[data-key=\\\"\" + manager.focusedKey + \"\\\"]\");\n      if (element) (0, $eCAIO$scrollIntoView)(scrollRef.current, element);\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n  var handlers = {\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onMouseDown: function onMouseDown(e) {\n      if (scrollRef.current === e.target) e.preventDefault();\n    }\n  };\n  var _ref2 = (0, $fb3050f43d946246$export$e32c88dfddc6e1d8)({\n      keyboardDelegate: delegate,\n      selectionManager: manager\n    }),\n    typeSelectProps = _ref2.typeSelectProps;\n  if (!disallowTypeAhead) handlers = (0, $eCAIO$mergeProps)(typeSelectProps, handlers);\n  var tabIndex;\n  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;\n  return {\n    collectionProps: _objectSpread(_objectSpread({}, handlers), {}, {\n      tabIndex: tabIndex\n    })\n  };\n}\nfunction $880e95eb8b93ba9a$export$ecf600387e221c37(options) {\n  var manager = options.selectionManager,\n    key = options.key,\n    ref = options.ref,\n    shouldSelectOnPressUp = options.shouldSelectOnPressUp,\n    isVirtualized = options.isVirtualized,\n    shouldUseVirtualFocus = options.shouldUseVirtualFocus,\n    focus = options.focus,\n    isDisabled = options.isDisabled,\n    onAction = options.onAction,\n    allowsDifferentPressOrigin = options.allowsDifferentPressOrigin;\n  var onSelect = function onSelect(e) {\n    if (e.pointerType === \"keyboard\" && (0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.toggleSelection(key);else {\n      if (manager.selectionMode === \"none\") return;\n      if (manager.selectionMode === \"single\") {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);else manager.replaceSelection(key);\n      } else if (e && e.shiftKey) manager.extendSelection(key);else if (manager.selectionBehavior === \"toggle\" || e && ((0, $feb5ffebff200149$export$16792effe837dba3)(e) || e.pointerType === \"touch\" || e.pointerType === \"virtual\")) manager.toggleSelection(key);else manager.replaceSelection(key);\n    }\n  };\n  (0, $eCAIO$useEffect)(function () {\n    var isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) focus();else (0, $eCAIO$focusSafely)(ref.current);\n    }\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n  isDisabled = isDisabled || manager.isDisabled(key);\n  var itemProps = {};\n  if (!shouldUseVirtualFocus && !isDisabled) itemProps = {\n    tabIndex: key === manager.focusedKey ? 0 : -1,\n    onFocus: function onFocus(e) {\n      if (e.target === ref.current) manager.setFocusedKey(key);\n    }\n  };else if (isDisabled) itemProps.onMouseDown = function (e) {\n    e.preventDefault();\n  };\n  var allowsSelection = !isDisabled && manager.canSelectItem(key);\n  var allowsActions = onAction && !isDisabled;\n  var hasPrimaryAction = allowsActions && (manager.selectionBehavior === \"replace\" ? !allowsSelection : manager.isEmpty);\n  var hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === \"replace\";\n  var hasAction = hasPrimaryAction || hasSecondaryAction;\n  var modality = (0, $eCAIO$useRef)(null);\n  var longPressEnabled = hasAction && allowsSelection;\n  var longPressEnabledOnPressStart = (0, $eCAIO$useRef)(false);\n  var hadPrimaryActionOnPressStart = (0, $eCAIO$useRef)(false);\n  var itemPressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = function (e) {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === \"keyboard\" && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n    if (!allowsDifferentPressOrigin) itemPressProps.onPress = function (e) {\n      if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== \"mouse\") {\n        if (e.pointerType === \"keyboard\" && !$880e95eb8b93ba9a$var$isActionKey()) return;\n        onAction();\n      } else if (e.pointerType !== \"keyboard\") onSelect(e);\n    };else {\n      itemPressProps.onPressUp = function (e) {\n        if (e.pointerType !== \"keyboard\") onSelect(e);\n      };\n      itemPressProps.onPress = hasPrimaryAction ? function () {\n        return onAction();\n      } : null;\n    }\n  } else {\n    itemPressProps.onPressStart = function (e) {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n      if (e.pointerType === \"mouse\" && !hasPrimaryAction || e.pointerType === \"keyboard\" && (!onAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n    itemPressProps.onPress = function (e) {\n      if (e.pointerType === \"touch\" || e.pointerType === \"pen\" || e.pointerType === \"virtual\" || e.pointerType === \"keyboard\" && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === \"mouse\" && hadPrimaryActionOnPressStart.current) {\n        if (hasAction) onAction();else onSelect(e);\n      }\n    };\n  }\n  if (!isVirtualized) itemProps[\"data-key\"] = key;\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  var _ref3 = (0, $eCAIO$usePress)(itemPressProps),\n    pressProps = _ref3.pressProps,\n    isPressed = _ref3.isPressed;\n  var onDoubleClick = hasSecondaryAction ? function (e) {\n    if (modality.current === \"mouse\") {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n  var _ref4 = (0, $eCAIO$useLongPress)({\n      isDisabled: !longPressEnabled,\n      onLongPress: function onLongPress(e) {\n        if (e.pointerType === \"touch\") {\n          onSelect(e);\n          manager.setSelectionBehavior(\"toggle\");\n        }\n      }\n    }),\n    longPressProps = _ref4.longPressProps;\n  var onDragStartCapture = function onDragStartCapture(e) {\n    if (modality.current === \"touch\" && longPressEnabledOnPressStart.current) e.preventDefault();\n  };\n  return {\n    itemProps: (0, $eCAIO$mergeProps)(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {\n      onDoubleClick: onDoubleClick,\n      onDragStartCapture: onDragStartCapture\n    }),\n    isPressed: isPressed,\n    isSelected: manager.isSelected(key),\n    isDisabled: isDisabled,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nfunction $880e95eb8b93ba9a$var$isActionKey() {\n  var event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === \"Enter\";\n}\nfunction $880e95eb8b93ba9a$var$isSelectionKey() {\n  var event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === \" \" || (event === null || event === void 0 ? void 0 : event.code) === \"Space\";\n}\nvar $2a25aae57d74318e$export$a05409b8bb224a5a = function () {\n  function $2a25aae57d74318e$export$a05409b8bb224a5a(collection, disabledKeys, ref, collator) {\n    _classCallCheck(this, $2a25aae57d74318e$export$a05409b8bb224a5a);\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n  _createClass($2a25aae57d74318e$export$a05409b8bb224a5a, [{\n    key: \"getKeyBelow\",\n    value: function getKeyBelow(key) {\n      key = this.collection.getKeyAfter(key);\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyAfter(key);\n      }\n    }\n  }, {\n    key: \"getKeyAbove\",\n    value: function getKeyAbove(key) {\n      key = this.collection.getKeyBefore(key);\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyBefore(key);\n      }\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var key = this.collection.getFirstKey();\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyAfter(key);\n      }\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var key = this.collection.getLastKey();\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyBefore(key);\n      }\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.ref.current.querySelector(\"[data-key=\\\"\" + key + \"\\\"]\");\n    }\n  }, {\n    key: \"getKeyPageAbove\",\n    value: function getKeyPageAbove(key) {\n      var menu = this.ref.current;\n      var item = this.getItem(key);\n      if (!item) return null;\n      var pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n      while (item && item.offsetTop > pageY) {\n        key = this.getKeyAbove(key);\n        item = this.getItem(key);\n      }\n      return key;\n    }\n  }, {\n    key: \"getKeyPageBelow\",\n    value: function getKeyPageBelow(key) {\n      var menu = this.ref.current;\n      var item = this.getItem(key);\n      if (!item) return null;\n      var pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n      while (item && item.offsetTop < pageY) {\n        key = this.getKeyBelow(key);\n        item = this.getItem(key);\n      }\n      return key;\n    }\n  }, {\n    key: \"getKeyForSearch\",\n    value: function getKeyForSearch(search, fromKey) {\n      if (!this.collator) return null;\n      var collection = this.collection;\n      var key = fromKey || this.getFirstKey();\n      while (key != null) {\n        var item = collection.getItem(key);\n        var substring = item.textValue.slice(0, search.length);\n        if (item.textValue && this.collator.compare(substring, search) === 0) return key;\n        key = this.getKeyBelow(key);\n      }\n      return null;\n    }\n  }]);\n  return $2a25aae57d74318e$export$a05409b8bb224a5a;\n}();\nfunction $982254629710d113$export$b95089534ab7c1fd(props) {\n  var selectionManager = props.selectionManager,\n    collection = props.collection,\n    disabledKeys = props.disabledKeys,\n    ref = props.ref,\n    keyboardDelegate = props.keyboardDelegate,\n    autoFocus = props.autoFocus,\n    shouldFocusWrap = props.shouldFocusWrap,\n    isVirtualized = props.isVirtualized,\n    disallowEmptySelection = props.disallowEmptySelection,\n    _props$selectOnFocus = props.selectOnFocus,\n    selectOnFocus = _props$selectOnFocus === void 0 ? selectionManager.selectionBehavior === \"replace\" : _props$selectOnFocus,\n    disallowTypeAhead = props.disallowTypeAhead,\n    shouldUseVirtualFocus = props.shouldUseVirtualFocus,\n    allowsTabNavigation = props.allowsTabNavigation;\n  var collator = (0, $eCAIO$useCollator)({\n    usage: \"search\",\n    sensitivity: \"base\"\n  });\n  var disabledBehavior = selectionManager.disabledBehavior;\n  var delegate = (0, $eCAIO$useMemo)(function () {\n    return keyboardDelegate || new (0, $2a25aae57d74318e$export$a05409b8bb224a5a)(collection, disabledBehavior === \"selection\" ? new Set() : disabledKeys, ref, collator);\n  }, [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n  var _ref5 = (0, $ae20dd8cbca75726$export$d6daf82dcd84e87c)({\n      ref: ref,\n      selectionManager: selectionManager,\n      keyboardDelegate: delegate,\n      autoFocus: autoFocus,\n      shouldFocusWrap: shouldFocusWrap,\n      disallowEmptySelection: disallowEmptySelection,\n      selectOnFocus: selectOnFocus,\n      disallowTypeAhead: disallowTypeAhead,\n      shouldUseVirtualFocus: shouldUseVirtualFocus,\n      allowsTabNavigation: allowsTabNavigation,\n      isVirtualized: isVirtualized,\n      scrollRef: ref\n    }),\n    collectionProps = _ref5.collectionProps;\n  return {\n    listProps: collectionProps\n  };\n}\nexport { $ae20dd8cbca75726$export$d6daf82dcd84e87c as useSelectableCollection, $880e95eb8b93ba9a$export$ecf600387e221c37 as useSelectableItem, $982254629710d113$export$b95089534ab7c1fd as useSelectableList, $2a25aae57d74318e$export$a05409b8bb224a5a as ListKeyboardDelegate, $fb3050f43d946246$export$e32c88dfddc6e1d8 as useTypeSelect };","map":{"version":3,"mappings":"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","names":["$feb5ffebff200149$export$d3e3bd3e26688c04","e","altKey","ctrlKey","$feb5ffebff200149$export$16792effe837dba3","metaKey","$fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS","$fb3050f43d946246$export$e32c88dfddc6e1d8","options","keyboardDelegate","selectionManager","onTypeSelect","state","search","timeout","current","onKeyDown","character","$fb3050f43d946246$var$getStringForKey","key","trim","length","preventDefault","stopPropagation","getKeyForSearch","focusedKey","setFocusedKey","clearTimeout","setTimeout","typeSelectProps","onKeyDownCapture","test","$ae20dd8cbca75726$export$d6daf82dcd84e87c","manager","delegate","ref","autoFocus","shouldFocusWrap","disallowEmptySelection","disallowSelectAll","selectOnFocus","selectionBehavior","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","isVirtualized","scrollRef","direction","contains","target","navigateToKey","childFocus","shiftKey","selectionMode","extendSelection","replaceSelection","getKeyBelow","_delegate_getFirstKey","_delegate_getFirstKey1","nextKey","getFirstKey","getKeyAbove","_delegate_getLastKey","_delegate_getLastKey1","nextKey1","getLastKey","getKeyLeftOf","nextKey2","getKeyRightOf","nextKey3","firstKey","lastKey","getKeyPageBelow","nextKey4","getKeyPageAbove","nextKey5","selectAll","clearSelection","focus","walker","tabbable","next","last","lastChild","document","activeElement","scrollPos","top","left","scrollTop","scrollLeft","onFocus","isFocused","currentTarget","setFocused","navigateToFirstKey","relatedTarget","_manager_lastSelectedKey","_manager_firstSelectedKey","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","firstSelectedKey","element","querySelector","onBlur","autoFocusRef","selectedKeys","size","values","value","handlers","onMouseDown","tabIndex","collectionProps","$880e95eb8b93ba9a$export$ecf600387e221c37","shouldSelectOnPressUp","isDisabled","onAction","allowsDifferentPressOrigin","onSelect","pointerType","toggleSelection","isSelected","childFocusStrategy","itemProps","allowsSelection","canSelectItem","allowsActions","hasPrimaryAction","isEmpty","hasSecondaryAction","hasAction","modality","longPressEnabled","longPressEnabledOnPressStart","hadPrimaryActionOnPressStart","itemPressProps","onPressStart","$880e95eb8b93ba9a$var$isSelectionKey","onPress","$880e95eb8b93ba9a$var$isActionKey","onPressUp","preventFocusOnPress","pressProps","isPressed","onDoubleClick","undefined","onLongPress","setSelectionBehavior","longPressProps","onDragStartCapture","event","window","code","$2a25aae57d74318e$export$a05409b8bb224a5a","collection","disabledKeys","collator","getKeyAfter","item","getItem","type","has","getKeyBefore","menu","pageY","Math","max","offsetTop","offsetHeight","min","scrollHeight","fromKey","substring","textValue","slice","compare","$982254629710d113$export$b95089534ab7c1fd","props","usage","sensitivity","disabledBehavior","Set","listProps"],"sources":["packages/@react-aria/selection/src/utils.ts","packages/@react-aria/selection/src/useTypeSelect.ts","packages/@react-aria/selection/src/useSelectableCollection.ts","packages/@react-aria/selection/src/useSelectableItem.ts","packages/@react-aria/selection/src/ListKeyboardDelegate.ts","packages/@react-aria/selection/src/useSelectableList.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isAppleDevice} from '@react-aria/utils';\nimport {isMac} from '@react-aria/utils';\n\ninterface Event {\n  altKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean\n}\n\nexport function isNonContiguousSelectionModifier(e: Event) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nexport function isCtrlKeyPressed(e: Event) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {Key, KeyboardEvent, useRef} from 'react';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\n/**\n * Controls how long to wait before clearing the typeahead buffer.\n */\nconst TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second\n\nexport interface AriaTypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\nexport interface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: DOMAttributes\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: AriaTypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {FocusEvent, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, useEvent} from '@react-aria/utils';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\nexport interface AriaSelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement>\n}\n\nexport interface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: DOMAttributes\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: AriaSelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {direction} = useLocale();\n\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target as Element)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: FocusableElement;\n            let last: FocusableElement;\n            do {\n              last = walker.lastChild() as FocusableElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection\n        focusWithoutScrolling(element);\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && manager.focusedKey && scrollRef?.current) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, LongPressEvent, PressEvent} from '@react-types/shared';\nimport {focusSafely} from '@react-aria/focus';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {Key, RefObject, useEffect, useRef} from 'react';\nimport {mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressProps, useLongPress, usePress} from '@react-aria/interactions';\n\nexport interface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<FocusableElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether selection requires the pointer/mouse down and up events to occur on the same target or triggers selection on\n   * the target of the pointer/mouse up event.\n   */\n  allowsDifferentPressOrigin?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\nexport interface SelectableItemStates {\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /**\n   * Whether the item is non-interactive, i.e. both selection and actions are disabled and the item may\n   * not be focused. Dependent on `disabledKeys` and `disabledBehavior`.\n   */\n  isDisabled: boolean,\n  /**\n   * Whether the item may be selected, dependent on `selectionMode`, `disabledKeys`, and `disabledBehavior`.\n   */\n  allowsSelection: boolean,\n  /**\n   * Whether the item has an action, dependent on `onAction`, `disabledKeys`,\n   * and `disabledBehavior`. It may also change depending on the current selection state\n   * of the list (e.g. when selection is primary). This can be used to enable or disable hover\n   * styles or other visual indications of interactivity.\n   */\n  hasAction: boolean\n}\n\nexport interface SelectableItemAria extends SelectableItemStates {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: DOMAttributes\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    focus,\n    isDisabled,\n    onAction,\n    allowsDifferentPressOrigin\n  } = options;\n\n  let onSelect = (e: PressEvent | LongPressEvent | PointerEvent) => {\n    if (e.pointerType === 'keyboard' && isNonContiguousSelectionModifier(e)) {\n      manager.toggleSelection(key);\n    } else {\n      if (manager.selectionMode === 'none') {\n        return;\n      }\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n          manager.toggleSelection(key);\n        } else {\n          manager.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        manager.extendSelection(key);\n      } else if (manager.selectionBehavior === 'toggle' || (e && (isCtrlKeyPressed(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  useEffect(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        focusSafely(ref.current);\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  isDisabled = isDisabled || manager.isDisabled(key);\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus && !isDisabled) {\n    itemProps = {\n      tabIndex: key === manager.focusedKey ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  } else if (isDisabled) {\n    itemProps.onMouseDown = (e) => {\n      // Prevent focus going to the body when clicking on a disabled item.\n      e.preventDefault();\n    };\n  }\n\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  let allowsSelection = !isDisabled && manager.canSelectItem(key);\n  let allowsActions = onAction && !isDisabled;\n  let hasPrimaryAction = allowsActions && (\n    manager.selectionBehavior === 'replace'\n      ? !allowsSelection\n      : manager.isEmpty\n  );\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = useRef(null);\n\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = useRef(false);\n  let hadPrimaryActionOnPressStart = useRef(false);\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps: PressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || isSelectionKey())) {\n        onSelect(e);\n      }\n    };\n\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) {\n      itemPressProps.onPress = (e) => {\n        if (hasPrimaryAction || (hasSecondaryAction && e.pointerType !== 'mouse')) {\n          if (e.pointerType === 'keyboard' && !isActionKey()) {\n            return;\n          }\n\n          onAction();\n        } else if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n    } else {\n      itemPressProps.onPressUp = (e) => {\n        if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n\n      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n    }\n  } else {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (\n        (e.pointerType === 'mouse' && !hasPrimaryAction) ||\n        (e.pointerType === 'keyboard' && (!onAction || isSelectionKey()))\n      ) {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = (e) => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (\n        e.pointerType === 'touch' ||\n        e.pointerType === 'pen' ||\n        e.pointerType === 'virtual' ||\n        (e.pointerType === 'keyboard' && hasAction && isActionKey()) ||\n        (e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current)\n      ) {\n        if (hasAction) {\n          onAction();\n        } else {\n          onSelect(e);\n        }\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {pressProps, isPressed} = usePress(itemPressProps);\n\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? (e) => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {longPressProps} = useLongPress({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  // Use a capturing listener to ensure this runs before useDrag, regardless of\n  // the order the props get merged.\n  let onDragStartCapture = e => {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) {\n      e.preventDefault();\n    }\n  };\n\n  return {\n    itemProps: mergeProps(\n      itemProps,\n      allowsSelection || hasPrimaryAction ? pressProps : {},\n      longPressEnabled ? longPressProps : {},\n      {onDoubleClick, onDragStartCapture}\n    ),\n    isPressed,\n    isSelected: manager.isSelected(key),\n    isDisabled,\n    allowsSelection,\n    hasAction\n  };\n}\n\nfunction isActionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === 'Enter';\n}\n\nfunction isSelectionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === ' ' || event?.code === 'Space';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, DOMAttributes, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\nexport interface AriaSelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\nexport interface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: DOMAttributes\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: AriaSelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = selectionManager.selectionBehavior === 'replace',\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let disabledBehavior = selectionManager.disabledBehavior;\n  let delegate = useMemo(() => (\n    keyboardDelegate || new ListKeyboardDelegate(collection, disabledBehavior === 'selection' ? new Set() : disabledKeys, ref, collator)\n  ), [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n    isVirtualized,\n    scrollRef: ref\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}