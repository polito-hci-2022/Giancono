{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { useRef as $Qsto2$useRef, useState as $Qsto2$useState, useMemo as $Qsto2$useMemo, useEffect as $Qsto2$useEffect } from \"react\";\nimport { useControlledState as $Qsto2$useControlledState } from \"@react-stately/utils\";\nvar $e40ea825a81a3709$export$52baac22726c72bf = function (_Set) {\n  _inherits($e40ea825a81a3709$export$52baac22726c72bf, _Set);\n  var _super = _createSuper($e40ea825a81a3709$export$52baac22726c72bf);\n  function $e40ea825a81a3709$export$52baac22726c72bf(keys, anchorKey, currentKey) {\n    var _this;\n    _classCallCheck(this, $e40ea825a81a3709$export$52baac22726c72bf);\n    _this = _super.call(this, keys);\n    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {\n      _this.anchorKey = anchorKey || keys.anchorKey;\n      _this.currentKey = currentKey || keys.currentKey;\n    } else {\n      _this.anchorKey = anchorKey;\n      _this.currentKey = currentKey;\n    }\n    return _this;\n  }\n  return _createClass($e40ea825a81a3709$export$52baac22726c72bf);\n}(_wrapNativeSuper(Set));\nfunction $7af3f5b51489e0b5$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n  for (var item of setA) {\n    if (!setB.has(item)) return false;\n  }\n  return true;\n}\nfunction $7af3f5b51489e0b5$export$253fe78d46329472(props) {\n  var _props$selectionMode = props.selectionMode,\n    selectionMode = _props$selectionMode === void 0 ? \"none\" : _props$selectionMode,\n    disallowEmptySelection = props.disallowEmptySelection,\n    allowDuplicateSelectionEvents = props.allowDuplicateSelectionEvents,\n    _props$selectionBehav = props.selectionBehavior,\n    selectionBehaviorProp = _props$selectionBehav === void 0 ? \"toggle\" : _props$selectionBehav,\n    _props$disabledBehavi = props.disabledBehavior,\n    disabledBehavior = _props$disabledBehavi === void 0 ? \"all\" : _props$disabledBehavi;\n  var isFocusedRef = (0, $Qsto2$useRef)(false);\n  var _ref = (0, $Qsto2$useState)(false),\n    _ref2 = _slicedToArray(_ref, 2),\n    _setFocused = _ref2[1];\n  var focusedKeyRef = (0, $Qsto2$useRef)(null);\n  var childFocusStrategyRef = (0, $Qsto2$useRef)(null);\n  var _ref3 = (0, $Qsto2$useState)(null),\n    _ref4 = _slicedToArray(_ref3, 2),\n    _setFocusedKey = _ref4[1];\n  var selectedKeysProp = (0, $Qsto2$useMemo)(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys);\n  }, [props.selectedKeys]);\n  var defaultSelectedKeys = (0, $Qsto2$useMemo)(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new (0, $e40ea825a81a3709$export$52baac22726c72bf)());\n  }, [props.defaultSelectedKeys]);\n  var _ref5 = (0, $Qsto2$useControlledState)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange),\n    _ref6 = _slicedToArray(_ref5, 2),\n    selectedKeys = _ref6[0],\n    _setSelectedKeys = _ref6[1];\n  var disabledKeysProp = (0, $Qsto2$useMemo)(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var _ref7 = (0, $Qsto2$useState)(selectionBehaviorProp),\n    _ref8 = _slicedToArray(_ref7, 2),\n    selectionBehavior = _ref8[0],\n    setSelectionBehavior = _ref8[1];\n  if (selectionBehaviorProp === \"replace\" && selectionBehavior === \"toggle\" && typeof selectedKeys === \"object\" && selectedKeys.size === 0) setSelectionBehavior(\"replace\");\n  var lastSelectionBehavior = (0, $Qsto2$useRef)(selectionBehaviorProp);\n  (0, $Qsto2$useEffect)(function () {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused: function setFocused(f) {\n      isFocusedRef.current = f;\n      _setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey: function setFocusedKey(k) {\n      var childFocusStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"first\";\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      _setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys: function setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) _setSelectedKeys(keys);\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior: disabledBehavior\n  };\n}\nfunction $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === \"all\" ? \"all\" : new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selection);\n}\nvar $d496c0a20b6e58ec$export$6c8a5aaad13c9852 = function () {\n  function $d496c0a20b6e58ec$export$6c8a5aaad13c9852(collection, state, options) {\n    _classCallCheck(this, $d496c0a20b6e58ec$export$6c8a5aaad13c9852);\n    this.collection = collection;\n    this.state = state;\n    var _options_allowsCellSelection;\n    this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;\n    this._isSelectAll = null;\n  }\n  _createClass($d496c0a20b6e58ec$export$6c8a5aaad13c9852, [{\n    key: \"selectionMode\",\n    get: function get() {\n      return this.state.selectionMode;\n    }\n  }, {\n    key: \"disallowEmptySelection\",\n    get: function get() {\n      return this.state.disallowEmptySelection;\n    }\n  }, {\n    key: \"selectionBehavior\",\n    get: function get() {\n      return this.state.selectionBehavior;\n    }\n  }, {\n    key: \"setSelectionBehavior\",\n    value: function setSelectionBehavior(selectionBehavior) {\n      this.state.setSelectionBehavior(selectionBehavior);\n    }\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      return this.state.isFocused;\n    }\n  }, {\n    key: \"setFocused\",\n    value: function setFocused(isFocused) {\n      this.state.setFocused(isFocused);\n    }\n  }, {\n    key: \"focusedKey\",\n    get: function get() {\n      return this.state.focusedKey;\n    }\n  }, {\n    key: \"childFocusStrategy\",\n    get: function get() {\n      return this.state.childFocusStrategy;\n    }\n  }, {\n    key: \"setFocusedKey\",\n    value: function setFocusedKey(key, childFocusStrategy) {\n      if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }, {\n    key: \"selectedKeys\",\n    get: function get() {\n      return this.state.selectedKeys === \"all\" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n    }\n  }, {\n    key: \"rawSelection\",\n    get: function get() {\n      return this.state.selectedKeys;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(key) {\n      if (this.state.selectionMode === \"none\") return false;\n      key = this.getKey(key);\n      return this.state.selectedKeys === \"all\" ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n    }\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.state.selectedKeys !== \"all\" && this.state.selectedKeys.size === 0;\n    }\n  }, {\n    key: \"isSelectAll\",\n    get: function get() {\n      if (this.isEmpty) return false;\n      if (this.state.selectedKeys === \"all\") return true;\n      if (this._isSelectAll != null) return this._isSelectAll;\n      var allKeys = this.getSelectAllKeys();\n      var selectedKeys = this.state.selectedKeys;\n      this._isSelectAll = allKeys.every(function (k) {\n        return selectedKeys.has(k);\n      });\n      return this._isSelectAll;\n    }\n  }, {\n    key: \"firstSelectedKey\",\n    get: function get() {\n      var first = null;\n      for (var key of this.state.selectedKeys) {\n        var item = this.collection.getItem(key);\n        if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;\n      }\n      return first === null || first === void 0 ? void 0 : first.key;\n    }\n  }, {\n    key: \"lastSelectedKey\",\n    get: function get() {\n      var last = null;\n      for (var key of this.state.selectedKeys) {\n        var item = this.collection.getItem(key);\n        if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;\n      }\n      return last === null || last === void 0 ? void 0 : last.key;\n    }\n  }, {\n    key: \"disabledKeys\",\n    get: function get() {\n      return this.state.disabledKeys;\n    }\n  }, {\n    key: \"disabledBehavior\",\n    get: function get() {\n      return this.state.disabledBehavior;\n    }\n  }, {\n    key: \"extendSelection\",\n    value: function extendSelection(toKey) {\n      if (this.selectionMode === \"none\") return;\n      if (this.selectionMode === \"single\") {\n        this.replaceSelection(toKey);\n        return;\n      }\n      toKey = this.getKey(toKey);\n      var selection;\n      if (this.state.selectedKeys === \"all\") selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)([toKey], toKey, toKey);else {\n        var selectedKeys = this.state.selectedKeys;\n        var anchorKey = selectedKeys.anchorKey || toKey;\n        selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);\n        for (var key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) selection.delete(key);\n        for (var key1 of this.getKeyRange(toKey, anchorKey)) if (this.canSelectItem(key1)) selection.add(key1);\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getKeyRange\",\n    value: function getKeyRange(from, to) {\n      var fromItem = this.collection.getItem(from);\n      var toItem = this.collection.getItem(to);\n      if (fromItem && toItem) {\n        if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);\n        return this.getKeyRangeInternal(to, from);\n      }\n      return [];\n    }\n  }, {\n    key: \"getKeyRangeInternal\",\n    value: function getKeyRangeInternal(from, to) {\n      var keys = [];\n      var key = from;\n      while (key) {\n        var item = this.collection.getItem(key);\n        if (item && item.type === \"item\" || item.type === \"cell\" && this.allowsCellSelection) keys.push(key);\n        if (key === to) return keys;\n        key = this.collection.getKeyAfter(key);\n      }\n      return [];\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(key) {\n      var item = this.collection.getItem(key);\n      if (!item) return key;\n      if (item.type === \"cell\" && this.allowsCellSelection) return key;\n      while (item.type !== \"item\" && item.parentKey != null) item = this.collection.getItem(item.parentKey);\n      if (!item || item.type !== \"item\") return null;\n      return item.key;\n    }\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection(key) {\n      if (this.selectionMode === \"none\") return;\n      if (this.selectionMode === \"single\" && !this.isSelected(key)) {\n        this.replaceSelection(key);\n        return;\n      }\n      key = this.getKey(key);\n      if (key == null) return;\n      var keys = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === \"all\" ? this.getSelectAllKeys() : this.state.selectedKeys);\n      if (keys.has(key)) keys.delete(key);else if (this.canSelectItem(key)) {\n        keys.add(key);\n        keys.anchorKey = key;\n        keys.currentKey = key;\n      }\n      if (this.disallowEmptySelection && keys.size === 0) return;\n      this.state.setSelectedKeys(keys);\n    }\n  }, {\n    key: \"replaceSelection\",\n    value: function replaceSelection(key) {\n      if (this.selectionMode === \"none\") return;\n      key = this.getKey(key);\n      if (key == null) return;\n      var selection = this.canSelectItem(key) ? new (0, $e40ea825a81a3709$export$52baac22726c72bf)([key], key, key) : new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"setSelectedKeys\",\n    value: function setSelectedKeys(keys) {\n      if (this.selectionMode === \"none\") return;\n      var selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n      for (var key of keys) {\n        key = this.getKey(key);\n        if (key != null) {\n          selection.add(key);\n          if (this.selectionMode === \"single\") break;\n        }\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getSelectAllKeys\",\n    value: function getSelectAllKeys() {\n      var _this2 = this;\n      var keys = [];\n      var addKeys = function addKeys(key) {\n        while (key) {\n          if (_this2.canSelectItem(key)) {\n            var item = _this2.collection.getItem(key);\n            if (item.type === \"item\") keys.push(key);\n            if (item.hasChildNodes && (_this2.allowsCellSelection || item.type !== \"item\")) addKeys(_toConsumableArray(item.childNodes)[0].key);\n          }\n          key = _this2.collection.getKeyAfter(key);\n        }\n      };\n      addKeys(this.collection.getFirstKey());\n      return keys;\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      if (this.selectionMode === \"multiple\") this.state.setSelectedKeys(\"all\");\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (!this.disallowEmptySelection && (this.state.selectedKeys === \"all\" || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new (0, $e40ea825a81a3709$export$52baac22726c72bf)());\n    }\n  }, {\n    key: \"toggleSelectAll\",\n    value: function toggleSelectAll() {\n      if (this.isSelectAll) this.clearSelection();else this.selectAll();\n    }\n  }, {\n    key: \"select\",\n    value: function select(key, e) {\n      if (this.selectionMode === \"none\") return;\n      if (this.selectionMode === \"single\") {\n        if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n      } else if (this.selectionBehavior === \"toggle\" || e && (e.pointerType === \"touch\" || e.pointerType === \"virtual\")) this.toggleSelection(key);else this.replaceSelection(key);\n    }\n  }, {\n    key: \"isSelectionEqual\",\n    value: function isSelectionEqual(selection) {\n      if (selection === this.state.selectedKeys) return true;\n      var selectedKeys = this.selectedKeys;\n      if (selection.size !== selectedKeys.size) return false;\n      for (var key of selection) {\n        if (!selectedKeys.has(key)) return false;\n      }\n      for (var key1 of selectedKeys) {\n        if (!selection.has(key1)) return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"canSelectItem\",\n    value: function canSelectItem(key) {\n      if (this.state.selectionMode === \"none\" || this.state.disabledKeys.has(key)) return false;\n      var item = this.collection.getItem(key);\n      if (!item || item.type === \"cell\" && !this.allowsCellSelection) return false;\n      return true;\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled(key) {\n      return this.state.disabledKeys.has(key) && this.state.disabledBehavior === \"all\";\n    }\n  }]);\n  return $d496c0a20b6e58ec$export$6c8a5aaad13c9852;\n}();\nexport { $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState, $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"mappings":"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","names":["$e40ea825a81a3709$export$52baac22726c72bf","keys","anchorKey","currentKey","Set","$7af3f5b51489e0b5$var$equalSets","setA","setB","size","item","has","$7af3f5b51489e0b5$export$253fe78d46329472","props","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","selectionBehavior","selectionBehaviorProp","disabledBehavior","isFocusedRef","setFocused","focusedKeyRef","childFocusStrategyRef","setFocusedKey","selectedKeysProp","$7af3f5b51489e0b5$var$convertSelection","selectedKeys","defaultSelectedKeys","onSelectionChange","setSelectedKeys","disabledKeysProp","disabledKeys","setSelectionBehavior","lastSelectionBehavior","current","isFocused","f","focusedKey","childFocusStrategy","k","selection","defaultValue","$d496c0a20b6e58ec$export$6c8a5aaad13c9852","collection","state","options","_options_allowsCellSelection","allowsCellSelection","_isSelectAll","key","getItem","getSelectAllKeys","getKey","canSelectItem","isEmpty","allKeys","every","first","index","last","toKey","replaceSelection","getKeyRange","delete","key1","add","from","to","fromItem","toItem","getKeyRangeInternal","type","push","getKeyAfter","parentKey","isSelected","addKeys","hasChildNodes","childNodes","getFirstKey","isSelectAll","clearSelection","selectAll","e","toggleSelection","pointerType"],"sources":["packages/@react-stately/selection/src/Selection.ts","packages/@react-stately/selection/src/useMultipleSelectionState.ts","packages/@react-stately/selection/src/SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    if (key == null || this.collection.getItem(key)) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}