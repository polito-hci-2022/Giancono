{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"register\"],\n  _excluded2 = [\"onPress\", \"onPressChange\", \"onPressStart\", \"onPressEnd\", \"onPressUp\", \"isDisabled\", \"isPressed\", \"preventFocusOnPress\", \"shouldCancelOnPointerExit\", \"allowTextSelectionOnPress\", \"ref\"],\n  _excluded3 = [\"children\"],\n  _excluded4 = [\"children\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { mergeProps as $bx7SL$mergeProps, useSyncRef as $bx7SL$useSyncRef, useGlobalListeners as $bx7SL$useGlobalListeners, isVirtualClick as $bx7SL$isVirtualClick, focusWithoutScrolling as $bx7SL$focusWithoutScrolling, isVirtualPointerEvent as $bx7SL$isVirtualPointerEvent, isIOS as $bx7SL$isIOS, runAfterTransition as $bx7SL$runAfterTransition, useLayoutEffect as $bx7SL$useLayoutEffect, isMac as $bx7SL$isMac, useEvent as $bx7SL$useEvent, useDescription as $bx7SL$useDescription } from \"@react-aria/utils\";\nimport $bx7SL$react, { useRef as $bx7SL$useRef, useContext as $bx7SL$useContext, useState as $bx7SL$useState, useMemo as $bx7SL$useMemo, useEffect as $bx7SL$useEffect, useCallback as $bx7SL$useCallback } from \"react\";\nvar $14c0b72509d70225$var$state = \"default\";\nvar $14c0b72509d70225$var$savedUserSelect = \"\";\nvar $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n  if ((0, $bx7SL$isIOS)()) {\n    if ($14c0b72509d70225$var$state === \"default\") {\n      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = \"none\";\n    }\n    $14c0b72509d70225$var$state = \"disabled\";\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = \"none\";\n  }\n}\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n  if ((0, $bx7SL$isIOS)()) {\n    if ($14c0b72509d70225$var$state !== \"disabled\") return;\n    $14c0b72509d70225$var$state = \"restoring\";\n    setTimeout(function () {\n      (0, $bx7SL$runAfterTransition)(function () {\n        if ($14c0b72509d70225$var$state === \"restoring\") {\n          if (document.documentElement.style.webkitUserSelect === \"none\") document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || \"\";\n          $14c0b72509d70225$var$savedUserSelect = \"\";\n          $14c0b72509d70225$var$state = \"default\";\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n      if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n        var targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n        if (target.style.userSelect === \"none\") target.style.userSelect = targetOldUserSelect;\n        if (target.getAttribute(\"style\") === \"\") target.removeAttribute(\"style\");\n        $14c0b72509d70225$var$modifiedElementMap.delete(target);\n      }\n    }\n}\nvar $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, $bx7SL$react).createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = \"PressResponderContext\";\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  var context = (0, $bx7SL$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n  if (context) {\n    var register = context.register,\n      contextProps = _objectWithoutProperties(context, _excluded);\n    props = (0, $bx7SL$mergeProps)(contextProps, props);\n    register();\n  }\n  (0, $bx7SL$useSyncRef)(context, props.ref);\n  return props;\n}\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  var _$f6c31cce2adf654f$va = $f6c31cce2adf654f$var$usePressResponderContext(props),\n    onPress = _$f6c31cce2adf654f$va.onPress,\n    onPressChange = _$f6c31cce2adf654f$va.onPressChange,\n    onPressStart = _$f6c31cce2adf654f$va.onPressStart,\n    onPressEnd = _$f6c31cce2adf654f$va.onPressEnd,\n    onPressUp = _$f6c31cce2adf654f$va.onPressUp,\n    isDisabled = _$f6c31cce2adf654f$va.isDisabled,\n    isPressedProp = _$f6c31cce2adf654f$va.isPressed,\n    preventFocusOnPress = _$f6c31cce2adf654f$va.preventFocusOnPress,\n    shouldCancelOnPointerExit = _$f6c31cce2adf654f$va.shouldCancelOnPointerExit,\n    allowTextSelectionOnPress = _$f6c31cce2adf654f$va.allowTextSelectionOnPress,\n    _ = _$f6c31cce2adf654f$va.ref,\n    domProps = _objectWithoutProperties(_$f6c31cce2adf654f$va, _excluded2);\n  var propsRef = (0, $bx7SL$useRef)(null);\n  propsRef.current = {\n    onPress: onPress,\n    onPressChange: onPressChange,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressUp: onPressUp,\n    isDisabled: isDisabled,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit\n  };\n  var _ref = (0, $bx7SL$useState)(false),\n    _ref2 = _slicedToArray(_ref, 2),\n    isPressed = _ref2[0],\n    setPressed = _ref2[1];\n  var ref = (0, $bx7SL$useRef)({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  var _ref3 = (0, $bx7SL$useGlobalListeners)(),\n    addGlobalListener = _ref3.addGlobalListener,\n    removeAllGlobalListeners = _ref3.removeAllGlobalListeners;\n  var pressProps = (0, $bx7SL$useMemo)(function () {\n    var state = ref.current;\n    var triggerPressStart = function triggerPressStart(originalEvent, pointerType) {\n      var _propsRef$current = propsRef.current,\n        onPressStart = _propsRef$current.onPressStart,\n        onPressChange = _propsRef$current.onPressChange,\n        isDisabled = _propsRef$current.isDisabled;\n      if (isDisabled || state.didFirePressStart) return;\n      if (onPressStart) onPressStart({\n        type: \"pressstart\",\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(true);\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n    var triggerPressEnd = function triggerPressEnd(originalEvent, pointerType) {\n      var wasPressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var _propsRef$current2 = propsRef.current,\n        onPressEnd = _propsRef$current2.onPressEnd,\n        onPressChange = _propsRef$current2.onPressChange,\n        onPress = _propsRef$current2.onPress,\n        isDisabled = _propsRef$current2.isDisabled;\n      if (!state.didFirePressStart) return;\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n      if (onPressEnd) onPressEnd({\n        type: \"pressend\",\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(false);\n      setPressed(false);\n      if (onPress && wasPressed && !isDisabled) onPress({\n        type: \"press\",\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    var triggerPressUp = function triggerPressUp(originalEvent, pointerType) {\n      var _propsRef$current3 = propsRef.current,\n        onPressUp = _propsRef$current3.onPressUp,\n        isDisabled = _propsRef$current3.isDisabled;\n      if (isDisabled) return;\n      if (onPressUp) onPressUp({\n        type: \"pressup\",\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    var cancel = function cancel(e) {\n      if (state.isPressed) {\n        if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n      }\n    };\n    var pressProps = {\n      onKeyDown: function onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n          e.stopPropagation();\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, \"keyboard\");\n            addGlobalListener(document, \"keyup\", onKeyUp, false);\n          }\n        } else if (e.key === \"Enter\" && $f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget)) e.stopPropagation();\n      },\n      onKeyUp: function onKeyUp(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\");\n      },\n      onClick: function onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) e.preventDefault();\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === \"virtual\" || (0, $bx7SL$isVirtualClick)(e.nativeEvent))) {\n            if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n            triggerPressStart(e, \"virtual\");\n            triggerPressUp(e, \"virtual\");\n            triggerPressEnd(e, \"virtual\");\n          }\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n    var onKeyUp = function onKeyUp(e) {\n      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n        e.stopPropagation();\n        state.isPressed = false;\n        var target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\", state.target.contains(target));\n        removeAllGlobalListeners();\n        if (state.target instanceof HTMLElement && state.target.contains(target) && ($f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute(\"role\") === \"link\")) state.target.click();\n      }\n    };\n    if (typeof PointerEvent !== \"undefined\") {\n      pressProps.onPointerDown = function (e) {\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        if ((0, $bx7SL$isVirtualPointerEvent)(e.nativeEvent)) {\n          state.pointerType = \"virtual\";\n          return;\n        }\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n          triggerPressStart(e, state.pointerType);\n          addGlobalListener(document, \"pointermove\", onPointerMove, false);\n          addGlobalListener(document, \"pointerup\", onPointerUp, false);\n          addGlobalListener(document, \"pointercancel\", onPointerCancel, false);\n        }\n      };\n      pressProps.onMouseDown = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (e.button === 0) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n      pressProps.onPointerUp = function (e) {\n        if (!e.currentTarget.contains(e.target) || state.pointerType === \"virtual\") return;\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      };\n      var onPointerMove = function onPointerMove(e) {\n        if (e.pointerId !== state.activePointerId) return;\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n      var onPointerUp = function onPointerUp(e) {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        }\n      };\n      var onPointerCancel = function onPointerCancel(e) {\n        cancel(e);\n      };\n      pressProps.onDragStart = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = function (e) {\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) return;\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = (0, $bx7SL$isVirtualClick)(e.nativeEvent) ? \"virtual\" : \"mouse\";\n        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(document, \"mouseup\", onMouseUp, false);\n      };\n      pressProps.onMouseEnter = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n      pressProps.onMouseLeave = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n      pressProps.onMouseUp = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n      };\n      var onMouseUp = function onMouseUp(e) {\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n      pressProps.onTouchStart = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        var touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = \"touch\";\n        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(window, \"scroll\", onScroll, true);\n      };\n      pressProps.onTouchMove = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        var touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n      pressProps.onTouchEnd = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        var touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        removeAllGlobalListeners();\n      };\n      pressProps.onTouchCancel = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n      var onScroll = function onScroll(e) {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n      pressProps.onDragStart = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n  (0, $bx7SL$useEffect)(function () {\n    return function () {\n      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(ref.current.target);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: (0, $bx7SL$mergeProps)(domProps, pressProps)\n  };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === \"A\" && target.hasAttribute(\"href\");\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n  var key = event.key,\n    code = event.code;\n  var element = currentTarget;\n  var role = element.getAttribute(\"role\");\n  return (key === \"Enter\" || key === \" \" || key === \"Spacebar\" || code === \"Space\") && !(element instanceof HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === \"button\" && key !== \"Enter\") && !(role === \"link\" && key !== \"Enter\");\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  var targetTouches = event.targetTouches;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  var changedTouches = event.changedTouches;\n  for (var i = 0; i < changedTouches.length; i++) {\n    var touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n  return null;\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  var offsetX = point.width / 2 || point.radiusX || 0;\n  var offsetY = point.height / 2 || point.radiusY || 0;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  if (a.left > b.right || b.left > a.right) return false;\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  var rect = target.getBoundingClientRect();\n  var pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n  if (target instanceof HTMLButtonElement) return target.type !== \"submit\";\n  return true;\n}\nvar $f6c31cce2adf654f$var$nonTextInputTypes = new Set([\"checkbox\", \"radio\", \"range\", \"color\", \"file\", \"image\", \"button\", \"submit\", \"reset\"]);\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n  return target.type === \"checkbox\" || target.type === \"radio\" ? key === \" \" : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\nvar $3b117e43dc0ca95d$export$27c701ed9e449e99 = (0, $bx7SL$react).forwardRef(function (_ref4, ref) {\n  var children = _ref4.children,\n    props = _objectWithoutProperties(_ref4, _excluded3);\n  var newRef = (0, $bx7SL$useRef)();\n  ref = ref !== null && ref !== void 0 ? ref : newRef;\n  var _ref5 = (0, $f6c31cce2adf654f$export$45712eceda6fad21)(_objectSpread(_objectSpread({}, props), {}, {\n      ref: ref\n    })),\n    pressProps = _ref5.pressProps;\n  var child = (0, $bx7SL$react).Children.only(children);\n  return (0, $bx7SL$react).cloneElement(child, _objectSpread({\n    ref: ref\n  }, (0, $bx7SL$mergeProps)(child.props, pressProps)));\n});\nvar $f1ab8c75478c6f73$export$3351871ee4b288b8 = (0, $bx7SL$react).forwardRef(function (_ref6, ref) {\n  var children = _ref6.children,\n    props = _objectWithoutProperties(_ref6, _excluded4);\n  var isRegistered = (0, $bx7SL$useRef)(false);\n  var prevContext = (0, $bx7SL$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n  var context = (0, $bx7SL$mergeProps)(prevContext || {}, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n    register: function register() {\n      isRegistered.current = true;\n      if (prevContext) prevContext.register();\n    }\n  }));\n  (0, $bx7SL$useSyncRef)(prevContext, ref);\n  (0, $bx7SL$useEffect)(function () {\n    if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n  }, []);\n  return (0, $bx7SL$react).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {\n    value: context\n  }, children);\n});\nvar $8a9cb279dc87e130$export$905e7fc544a71f36 = function () {\n  function $8a9cb279dc87e130$export$905e7fc544a71f36(type, nativeEvent) {\n    _classCallCheck(this, $8a9cb279dc87e130$export$905e7fc544a71f36);\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target;\n    this.currentTarget = nativeEvent.currentTarget;\n    this.relatedTarget = nativeEvent.relatedTarget;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n  _createClass($8a9cb279dc87e130$export$905e7fc544a71f36, [{\n    key: \"isDefaultPrevented\",\n    value: function isDefaultPrevented() {\n      return this.nativeEvent.defaultPrevented;\n    }\n  }, {\n    key: \"preventDefault\",\n    value: function preventDefault() {\n      this.defaultPrevented = true;\n      this.nativeEvent.preventDefault();\n    }\n  }, {\n    key: \"stopPropagation\",\n    value: function stopPropagation() {\n      this.nativeEvent.stopPropagation();\n      this.isPropagationStopped = function () {\n        return true;\n      };\n    }\n  }, {\n    key: \"isPropagationStopped\",\n    value: function isPropagationStopped() {\n      return false;\n    }\n  }, {\n    key: \"persist\",\n    value: function persist() {}\n  }]);\n  return $8a9cb279dc87e130$export$905e7fc544a71f36;\n}();\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  var stateRef = (0, $bx7SL$useRef)({\n    isFocused: false,\n    onBlur: onBlur,\n    observer: null\n  });\n  stateRef.current.onBlur = onBlur;\n  (0, $bx7SL$useLayoutEffect)(function () {\n    var state = stateRef.current;\n    return function () {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n  return (0, $bx7SL$useCallback)(function (e) {\n    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = true;\n      var target = e.target;\n      var onBlurHandler = function onBlurHandler(e) {\n        var _stateRef_current, _stateRef_current_onBlur;\n        stateRef.current.isFocused = false;\n        if (target.disabled) (_stateRef_current_onBlur = (_stateRef_current = stateRef.current).onBlur) === null || _stateRef_current_onBlur === void 0 ? void 0 : _stateRef_current_onBlur.call(_stateRef_current, new $8a9cb279dc87e130$export$905e7fc544a71f36(\"blur\", e));\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n      target.addEventListener(\"focusout\", onBlurHandler, {\n        once: true\n      });\n      stateRef.current.observer = new MutationObserver(function () {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent(\"blur\"));\n          target.dispatchEvent(new FocusEvent(\"focusout\", {\n            bubbles: true\n          }));\n        }\n      });\n      stateRef.current.observer.observe(target, {\n        attributes: true,\n        attributeFilter: [\"disabled\"]\n      });\n    }\n  }, []);\n}\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  var isDisabled = props.isDisabled,\n    onFocusProp = props.onFocus,\n    onBlurProp = props.onBlur,\n    onFocusChange = props.onFocusChange;\n  var onBlur = (0, $bx7SL$useCallback)(function (e) {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) onBlurProp(e);\n      if (onFocusChange) onFocusChange(false);\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n  var onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);\n  var onFocus = (0, $bx7SL$useCallback)(function (e) {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) onFocusProp(e);\n      if (onFocusChange) onFocusChange(true);\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null\n    }\n  };\n}\nvar $507fabe10e71c6fb$var$currentModality = null;\nvar $507fabe10e71c6fb$var$changeHandlers = new Set();\nvar $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nvar $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nvar $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\nvar $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n  for (var handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);\n}\nfunction $507fabe10e71c6fb$var$isValidKey(e) {\n  return !(e.metaKey || !(0, $bx7SL$isMac)() && e.altKey || e.ctrlKey || e.key === \"Control\" || e.key === \"Shift\" || e.key === \"Meta\");\n}\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n  if ($507fabe10e71c6fb$var$isValidKey(e)) {\n    $507fabe10e71c6fb$var$currentModality = \"keyboard\";\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"keyboard\", e);\n  }\n}\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n  $507fabe10e71c6fb$var$currentModality = \"pointer\";\n  if (e.type === \"mousedown\" || e.type === \"pointerdown\") {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"pointer\", e);\n  }\n}\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n  if ((0, $bx7SL$isVirtualClick)(e)) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$currentModality = \"virtual\";\n  }\n}\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n  if (e.target === window || e.target === document) return;\n  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n    $507fabe10e71c6fb$var$currentModality = \"virtual\";\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"virtual\", e);\n  }\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\nfunction $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return;\n  var focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n  document.addEventListener(\"keydown\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener(\"keyup\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener(\"click\", $507fabe10e71c6fb$var$handleClickEvent, true);\n  window.addEventListener(\"focus\", $507fabe10e71c6fb$var$handleFocusEvent, true);\n  window.addEventListener(\"blur\", $507fabe10e71c6fb$var$handleWindowBlur, false);\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"pointermove\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"pointerup\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"mousemove\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"mouseup\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n  }\n  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\nif (typeof document !== \"undefined\") {\n  if (document.readyState !== \"loading\") $507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener(\"DOMContentLoaded\", $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n  return $507fabe10e71c6fb$var$currentModality !== \"pointer\";\n}\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n  return $507fabe10e71c6fb$var$currentModality;\n}\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n  $507fabe10e71c6fb$var$currentModality = modality;\n  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  var _ref7 = (0, $bx7SL$useState)($507fabe10e71c6fb$var$currentModality),\n    _ref8 = _slicedToArray(_ref7, 2),\n    modality = _ref8[0],\n    setModality = _ref8[1];\n  (0, $bx7SL$useEffect)(function () {\n    var handler = function handler() {\n      setModality($507fabe10e71c6fb$var$currentModality);\n    };\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return function () {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, []);\n  return modality;\n}\nfunction $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n  return !(isTextInput && modality === \"keyboard\" && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var isTextInput = props.isTextInput,\n    autoFocus = props.autoFocus;\n  var _ref9 = (0, $bx7SL$useState)(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27()),\n    _ref10 = _slicedToArray(_ref9, 2),\n    isFocusVisibleState = _ref10[0],\n    setFocusVisible = _ref10[1];\n  $507fabe10e71c6fb$export$ec71b4b83ac08ec3(function (isFocusVisible) {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {\n    isTextInput: isTextInput\n  });\n  return {\n    isFocusVisible: isFocusVisibleState\n  };\n}\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  (0, $bx7SL$useEffect)(function () {\n    var handler = function handler(modality, e) {\n      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n    };\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return function () {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, deps);\n}\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  var isDisabled = props.isDisabled,\n    onBlurWithin = props.onBlurWithin,\n    onFocusWithin = props.onFocusWithin,\n    onFocusWithinChange = props.onFocusWithinChange;\n  var state = (0, $bx7SL$useRef)({\n    isFocusWithin: false\n  });\n  var onBlur = (0, $bx7SL$useCallback)(function (e) {\n    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      state.current.isFocusWithin = false;\n      if (onBlurWithin) onBlurWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(false);\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n  var onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);\n  var onFocus = (0, $bx7SL$useCallback)(function (e) {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) onFocusWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(true);\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n  if (isDisabled) return {\n    focusWithinProps: {\n      onFocus: null,\n      onBlur: null\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\nvar $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nvar $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;\n  setTimeout(function () {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === \"touch\") $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (typeof document === \"undefined\") return;\n  if (typeof PointerEvent !== \"undefined\") document.addEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  $6179b936705e76d3$var$hoverCount++;\n  return function () {\n    $6179b936705e76d3$var$hoverCount--;\n    if ($6179b936705e76d3$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== \"undefined\") document.removeEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  var onHoverStart = props.onHoverStart,\n    onHoverChange = props.onHoverChange,\n    onHoverEnd = props.onHoverEnd,\n    isDisabled = props.isDisabled;\n  var _ref11 = (0, $bx7SL$useState)(false),\n    _ref12 = _slicedToArray(_ref11, 2),\n    isHovered = _ref12[0],\n    setHovered = _ref12[1];\n  var state = (0, $bx7SL$useRef)({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: \"\",\n    target: null\n  }).current;\n  (0, $bx7SL$useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  var _ref13 = (0, $bx7SL$useMemo)(function () {\n      var triggerHoverStart = function triggerHoverStart(event, pointerType) {\n        state.pointerType = pointerType;\n        if (isDisabled || pointerType === \"touch\" || state.isHovered || !event.currentTarget.contains(event.target)) return;\n        state.isHovered = true;\n        var target = event.currentTarget;\n        state.target = target;\n        if (onHoverStart) onHoverStart({\n          type: \"hoverstart\",\n          target: target,\n          pointerType: pointerType\n        });\n        if (onHoverChange) onHoverChange(true);\n        setHovered(true);\n      };\n      var triggerHoverEnd = function triggerHoverEnd(event, pointerType) {\n        state.pointerType = \"\";\n        state.target = null;\n        if (pointerType === \"touch\" || !state.isHovered) return;\n        state.isHovered = false;\n        var target = event.currentTarget;\n        if (onHoverEnd) onHoverEnd({\n          type: \"hoverend\",\n          target: target,\n          pointerType: pointerType\n        });\n        if (onHoverChange) onHoverChange(false);\n        setHovered(false);\n      };\n      var hoverProps = {};\n      if (typeof PointerEvent !== \"undefined\") {\n        hoverProps.onPointerEnter = function (e) {\n          if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === \"mouse\") return;\n          triggerHoverStart(e, e.pointerType);\n        };\n        hoverProps.onPointerLeave = function (e) {\n          if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n        };\n      } else {\n        hoverProps.onTouchStart = function () {\n          state.ignoreEmulatedMouseEvents = true;\n        };\n        hoverProps.onMouseEnter = function (e) {\n          if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, \"mouse\");\n          state.ignoreEmulatedMouseEvents = false;\n        };\n        hoverProps.onMouseLeave = function (e) {\n          if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, \"mouse\");\n        };\n      }\n      return {\n        hoverProps: hoverProps,\n        triggerHoverEnd: triggerHoverEnd\n      };\n    }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]),\n    hoverProps = _ref13.hoverProps,\n    triggerHoverEnd = _ref13.triggerHoverEnd;\n  (0, $bx7SL$useEffect)(function () {\n    if (isDisabled) triggerHoverEnd({\n      currentTarget: state.target\n    }, state.pointerType);\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  };\n}\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n  var ref = props.ref,\n    onInteractOutside = props.onInteractOutside,\n    isDisabled = props.isDisabled,\n    onInteractOutsideStart = props.onInteractOutsideStart;\n  var stateRef = (0, $bx7SL$useRef)({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside: onInteractOutside,\n    onInteractOutsideStart: onInteractOutsideStart\n  });\n  var state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n  (0, $bx7SL$useEffect)(function () {\n    if (isDisabled) return;\n    var onPointerDown = function onPointerDown(e) {\n      if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n        state.isPointerDown = true;\n      }\n    };\n    if (typeof PointerEvent !== \"undefined\") {\n      var onPointerUp = function onPointerUp(e) {\n        if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n      document.addEventListener(\"pointerdown\", onPointerDown, true);\n      document.addEventListener(\"pointerup\", onPointerUp, true);\n      return function () {\n        document.removeEventListener(\"pointerdown\", onPointerDown, true);\n        document.removeEventListener(\"pointerup\", onPointerUp, true);\n      };\n    } else {\n      var onMouseUp = function onMouseUp(e) {\n        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n      var onTouchEnd = function onTouchEnd(e) {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n      document.addEventListener(\"mousedown\", onPointerDown, true);\n      document.addEventListener(\"mouseup\", onMouseUp, true);\n      document.addEventListener(\"touchstart\", onPointerDown, true);\n      document.addEventListener(\"touchend\", onTouchEnd, true);\n      return function () {\n        document.removeEventListener(\"mousedown\", onPointerDown, true);\n        document.removeEventListener(\"mouseup\", onMouseUp, true);\n        document.removeEventListener(\"touchstart\", onPointerDown, true);\n        document.removeEventListener(\"touchend\", onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n  if (event.button > 0) return false;\n  if (event.target) {\n    var ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n  }\n  return ref.current && !ref.current.contains(event.target);\n}\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n  if (!handler) return;\n  var shouldStopPropagation = true;\n  return function (e) {\n    var event = _objectSpread(_objectSpread({}, e), {}, {\n      preventDefault: function preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented: function isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation: function stopPropagation() {\n        console.error(\"stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.\");\n      },\n      continuePropagation: function continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    });\n    handler(event);\n    if (shouldStopPropagation) e.stopPropagation();\n  };\n}\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),\n      onKeyUp: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)\n    }\n  };\n}\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  var onMoveStart = props.onMoveStart,\n    onMove = props.onMove,\n    onMoveEnd = props.onMoveEnd;\n  var state = (0, $bx7SL$useRef)({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  var _ref14 = (0, $bx7SL$useGlobalListeners)(),\n    addGlobalListener = _ref14.addGlobalListener,\n    removeGlobalListener = _ref14.removeGlobalListener;\n  var moveProps = (0, $bx7SL$useMemo)(function () {\n    var moveProps = {};\n    var start = function start() {\n      (0, $14c0b72509d70225$export$16a4697467175487)();\n      state.current.didMove = false;\n    };\n    var move = function move(originalEvent, pointerType, deltaX, deltaY) {\n      if (deltaX === 0 && deltaY === 0) return;\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n          type: \"movestart\",\n          pointerType: pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: \"move\",\n        pointerType: pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    var end = function end(originalEvent, pointerType) {\n      (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)();\n      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n        type: \"moveend\",\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    if (typeof PointerEvent === \"undefined\") {\n      var onMouseMove = function onMouseMove(e) {\n        if (e.button === 0) {\n          move(e, \"mouse\", e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      var onMouseUp = function onMouseUp(e) {\n        if (e.button === 0) {\n          end(e, \"mouse\");\n          removeGlobalListener(window, \"mousemove\", onMouseMove, false);\n          removeGlobalListener(window, \"mouseup\", onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = function (e) {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, \"mousemove\", onMouseMove, false);\n          addGlobalListener(window, \"mouseup\", onMouseUp, false);\n        }\n      };\n      var onTouchMove = function onTouchMove(e) {\n        var touch = _toConsumableArray(e.changedTouches).findIndex(function (_ref15) {\n          var identifier = _ref15.identifier;\n          return identifier === state.current.id;\n        });\n        if (touch >= 0) {\n          var _e$changedTouches$tou = e.changedTouches[touch],\n            pageX = _e$changedTouches$tou.pageX,\n            pageY = _e$changedTouches$tou.pageY;\n          move(e, \"touch\", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n      var onTouchEnd = function onTouchEnd(e) {\n        var touch = _toConsumableArray(e.changedTouches).findIndex(function (_ref16) {\n          var identifier = _ref16.identifier;\n          return identifier === state.current.id;\n        });\n        if (touch >= 0) {\n          end(e, \"touch\");\n          state.current.id = null;\n          removeGlobalListener(window, \"touchmove\", onTouchMove);\n          removeGlobalListener(window, \"touchend\", onTouchEnd);\n          removeGlobalListener(window, \"touchcancel\", onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = function (e) {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        var _e$changedTouches$ = e.changedTouches[0],\n          pageX = _e$changedTouches$.pageX,\n          pageY = _e$changedTouches$.pageY,\n          identifier = _e$changedTouches$.identifier;\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, \"touchmove\", onTouchMove, false);\n        addGlobalListener(window, \"touchend\", onTouchEnd, false);\n        addGlobalListener(window, \"touchcancel\", onTouchEnd, false);\n      };\n    } else {\n      var onPointerMove = function onPointerMove(e) {\n        if (e.pointerId === state.current.id) {\n          var pointerType = e.pointerType || \"mouse\";\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      var onPointerUp = function onPointerUp(e) {\n        if (e.pointerId === state.current.id) {\n          var pointerType = e.pointerType || \"mouse\";\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, \"pointermove\", onPointerMove, false);\n          removeGlobalListener(window, \"pointerup\", onPointerUp, false);\n          removeGlobalListener(window, \"pointercancel\", onPointerUp, false);\n        }\n      };\n      moveProps.onPointerDown = function (e) {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, \"pointermove\", onPointerMove, false);\n          addGlobalListener(window, \"pointerup\", onPointerUp, false);\n          addGlobalListener(window, \"pointercancel\", onPointerUp, false);\n        }\n      };\n    }\n    var triggerKeyboardMove = function triggerKeyboardMove(e, deltaX, deltaY) {\n      start();\n      move(e, \"keyboard\", deltaX, deltaY);\n      end(e, \"keyboard\");\n    };\n    moveProps.onKeyDown = function (e) {\n      switch (e.key) {\n        case \"Left\":\n        case \"ArrowLeft\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case \"Right\":\n        case \"ArrowRight\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case \"Up\":\n        case \"ArrowUp\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case \"Down\":\n        case \"ArrowDown\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n  return {\n    moveProps: moveProps\n  };\n}\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n  var onScroll = props.onScroll,\n    isDisabled = props.isDisabled;\n  var onScrollHandler = (0, $bx7SL$useCallback)(function (e) {\n    if (e.ctrlKey) return;\n    e.preventDefault();\n    e.stopPropagation();\n    if (onScroll) onScroll({\n      deltaX: e.deltaX,\n      deltaY: e.deltaY\n    });\n  }, [onScroll]);\n  (0, $bx7SL$useEvent)(ref, \"wheel\", isDisabled ? null : onScrollHandler);\n}\nvar $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n  var isDisabled = props.isDisabled,\n    onLongPressStart = props.onLongPressStart,\n    onLongPressEnd = props.onLongPressEnd,\n    onLongPress = props.onLongPress,\n    _props$threshold = props.threshold,\n    threshold = _props$threshold === void 0 ? $8a26561d2877236e$var$DEFAULT_THRESHOLD : _props$threshold,\n    accessibilityDescription = props.accessibilityDescription;\n  var timeRef = (0, $bx7SL$useRef)(null);\n  var _ref17 = (0, $bx7SL$useGlobalListeners)(),\n    addGlobalListener = _ref17.addGlobalListener,\n    removeGlobalListener = _ref17.removeGlobalListener;\n  var _ref18 = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({\n      isDisabled: isDisabled,\n      onPressStart: function onPressStart(e) {\n        if (e.pointerType === \"mouse\" || e.pointerType === \"touch\") {\n          if (onLongPressStart) onLongPressStart(_objectSpread(_objectSpread({}, e), {}, {\n            type: \"longpressstart\"\n          }));\n          timeRef.current = setTimeout(function () {\n            e.target.dispatchEvent(new PointerEvent(\"pointercancel\", {\n              bubbles: true\n            }));\n            if (onLongPress) onLongPress(_objectSpread(_objectSpread({}, e), {}, {\n              type: \"longpress\"\n            }));\n            timeRef.current = null;\n          }, threshold);\n          if (e.pointerType === \"touch\") {\n            var onContextMenu = function onContextMenu(e) {\n              e.preventDefault();\n            };\n            addGlobalListener(e.target, \"contextmenu\", onContextMenu, {\n              once: true\n            });\n            addGlobalListener(window, \"pointerup\", function () {\n              setTimeout(function () {\n                removeGlobalListener(e.target, \"contextmenu\", onContextMenu);\n              }, 30);\n            }, {\n              once: true\n            });\n          }\n        }\n      },\n      onPressEnd: function onPressEnd(e) {\n        if (timeRef.current) clearTimeout(timeRef.current);\n        if (onLongPressEnd && (e.pointerType === \"mouse\" || e.pointerType === \"touch\")) onLongPressEnd(_objectSpread(_objectSpread({}, e), {}, {\n          type: \"longpressend\"\n        }));\n      }\n    }),\n    pressProps = _ref18.pressProps;\n  var descriptionProps = (0, $bx7SL$useDescription)(onLongPress && !isDisabled ? accessibilityDescription : null);\n  return {\n    longPressProps: (0, $bx7SL$mergeProps)(pressProps, descriptionProps)\n  };\n}\nexport { $3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable, $f1ab8c75478c6f73$export$3351871ee4b288b8 as PressResponder, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus, $507fabe10e71c6fb$export$b9b3dfddab17db27 as isFocusVisible, $507fabe10e71c6fb$export$630ff653c5ada6a9 as getInteractionModality, $507fabe10e71c6fb$export$8397ddfc504fdb9a as setInteractionModality, $507fabe10e71c6fb$export$98e20ec92f614cfe as useInteractionModality, $507fabe10e71c6fb$export$ffd9e5021c1fb2d6 as useFocusVisible, $507fabe10e71c6fb$export$ec71b4b83ac08ec3 as useFocusVisibleListener, $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin, $6179b936705e76d3$export$ae780daf29e6d456 as useHover, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98 as useInteractOutside, $46d819fcbaf35654$export$8f71654801c2f7cd as useKeyboard, $e8a7022cf87cba2a$export$36da96379f79f245 as useMove, $f6c31cce2adf654f$export$45712eceda6fad21 as usePress, $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel, $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress };","map":{"version":3,"mappings":"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","names":["$14c0b72509d70225$var$state","$14c0b72509d70225$var$savedUserSelect","$14c0b72509d70225$var$modifiedElementMap","WeakMap","$14c0b72509d70225$export$16a4697467175487","target","document","documentElement","style","webkitUserSelect","HTMLElement","SVGElement","set","userSelect","$14c0b72509d70225$export$b0d6fa1ab32e3295","setTimeout","has","targetOldUserSelect","get","getAttribute","removeAttribute","delete","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","createContext","displayName","$f6c31cce2adf654f$var$usePressResponderContext","props","context","register","contextProps","ref","$f6c31cce2adf654f$export$45712eceda6fad21","onPress","onPressChange","onPressStart","onPressEnd","onPressUp","isDisabled","isPressedProp","isPressed","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","propsRef","current","setPressed","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","activePointerId","isOverTarget","pointerType","addGlobalListener","removeAllGlobalListeners","pressProps","state","triggerPressStart","originalEvent","type","currentTarget","shiftKey","metaKey","ctrlKey","altKey","triggerPressEnd","wasPressed","triggerPressUp","cancel","e","$f6c31cce2adf654f$var$createEvent","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","nativeEvent","contains","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","key","preventDefault","stopPropagation","repeat","onKeyUp","$f6c31cce2adf654f$var$isHTMLAnchorLink","onClick","button","click","PointerEvent","onPointerDown","$f6c31cce2adf654f$var$shouldPreventDefault","pointerId","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","window","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchEnd","onTouchCancel","tagName","hasAttribute","event","code","element","role","HTMLInputElement","$f6c31cce2adf654f$var$isValidInputKey","HTMLTextAreaElement","isContentEditable","targetTouches","length","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","width","radiusX","offsetY","height","radiusY","top","clientY","right","clientX","bottom","left","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","rect","getBoundingClientRect","pointRect","draggable","HTMLButtonElement","$f6c31cce2adf654f$var$nonTextInputTypes","Set","$3b117e43dc0ca95d$export$27c701ed9e449e99","forwardRef","children","newRef","child","Children","only","cloneElement","$f1ab8c75478c6f73$export$3351871ee4b288b8","isRegistered","prevContext","console","warn","Provider","value","$8a9cb279dc87e130$export$905e7fc544a71f36","relatedTarget","bubbles","cancelable","defaultPrevented","eventPhase","isTrusted","timeStamp","isPropagationStopped","$8a9cb279dc87e130$export$715c682d09d639cc","onBlur","stateRef","isFocused","observer","disconnect","HTMLSelectElement","onBlurHandler","_stateRef_current","disabled","_stateRef_current_onBlur","addEventListener","once","MutationObserver","dispatchEvent","FocusEvent","observe","attributes","attributeFilter","$a1ea59d68270f0dd$export$f8168d8dd8fd66e6","onFocusProp","onFocus","onBlurProp","onFocusChange","onSyntheticFocus","focusProps","undefined","$507fabe10e71c6fb$var$currentModality","$507fabe10e71c6fb$var$changeHandlers","$507fabe10e71c6fb$var$hasSetupGlobalListeners","$507fabe10e71c6fb$var$hasEventBeforeFocus","$507fabe10e71c6fb$var$hasBlurredWindowRecently","$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS","Tab","Escape","$507fabe10e71c6fb$var$triggerChangeHandlers","modality","handler","$507fabe10e71c6fb$var$isValidKey","$507fabe10e71c6fb$var$handleKeyboardEvent","$507fabe10e71c6fb$var$handlePointerEvent","$507fabe10e71c6fb$var$handleClickEvent","$507fabe10e71c6fb$var$handleFocusEvent","$507fabe10e71c6fb$var$handleWindowBlur","$507fabe10e71c6fb$var$setupGlobalFocusEvents","focus","prototype","apply","arguments","readyState","$507fabe10e71c6fb$export$b9b3dfddab17db27","$507fabe10e71c6fb$export$630ff653c5ada6a9","$507fabe10e71c6fb$export$8397ddfc504fdb9a","$507fabe10e71c6fb$export$98e20ec92f614cfe","setModality","add","$507fabe10e71c6fb$var$isKeyboardFocusEvent","isTextInput","KeyboardEvent","$507fabe10e71c6fb$export$ffd9e5021c1fb2d6","autoFocus","isFocusVisibleState","setFocusVisible","$507fabe10e71c6fb$export$ec71b4b83ac08ec3","isFocusVisible","fn","deps","opts","$9ab94262bd0047c7$export$420e68273165f4ec","onBlurWithin","onFocusWithin","onFocusWithinChange","isFocusWithin","focusWithinProps","$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$hoverCount","$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$handleGlobalPointerEvent","$6179b936705e76d3$var$setupGlobalTouchEvents","removeEventListener","$6179b936705e76d3$export$ae780daf29e6d456","onHoverStart","onHoverChange","onHoverEnd","isHovered","setHovered","triggerHoverStart","triggerHoverEnd","hoverProps","onPointerEnter","onPointerLeave","$e0b6e0b68ec7f50f$export$872b660ac5a1ff98","onInteractOutside","onInteractOutsideStart","isPointerDown","$e0b6e0b68ec7f50f$var$isValidEvent","ownerDocument","$93925083ecbb358c$export$48d1ea6320830260","shouldStopPropagation","isDefaultPrevented","error","continuePropagation","$46d819fcbaf35654$export$8f71654801c2f7cd","keyboardProps","$e8a7022cf87cba2a$export$36da96379f79f245","onMoveStart","onMove","onMoveEnd","didMove","lastPosition","id","removeGlobalListener","moveProps","start","move","deltaX","deltaY","end","onMouseMove","pageX","pageY","findIndex","triggerKeyboardMove","$7d0a636d7a4dcefd$export$2123ff2b87c81ca","onScrollHandler","$8a26561d2877236e$var$DEFAULT_THRESHOLD","$8a26561d2877236e$export$c24ed0104d07eab9","onLongPressStart","onLongPressEnd","onLongPress","threshold","accessibilityDescription","timeRef","onContextMenu","clearTimeout","descriptionProps","longPressProps"],"sources":["packages/@react-aria/interactions/src/textSelection.ts","packages/@react-aria/interactions/src/context.ts","packages/@react-aria/interactions/src/usePress.ts","packages/@react-aria/interactions/src/Pressable.tsx","packages/@react-aria/interactions/src/PressResponder.tsx","packages/@react-aria/interactions/src/utils.ts","packages/@react-aria/interactions/src/useFocus.ts","packages/@react-aria/interactions/src/useFocusVisible.ts","packages/@react-aria/interactions/src/useFocusWithin.ts","packages/@react-aria/interactions/src/useHover.ts","packages/@react-aria/interactions/src/useInteractOutside.ts","packages/@react-aria/interactions/src/createEventHandler.ts","packages/@react-aria/interactions/src/useKeyboard.ts","packages/@react-aria/interactions/src/useMove.ts","packages/@react-aria/interactions/src/useScrollWheel.ts","packages/@react-aria/interactions/src/useLongPress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<Element, string>();\n\nexport function disableTextSelection(target?: Element) {\n  if (isIOS()) {\n    if (state === 'default') {\n      savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: Element) {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target);\n\n      if (target.style.userSelect === 'none') {\n        target.style.userSelect = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface IPressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<FocusableElement>\n}\n\nexport const PressResponderContext = React.createContext<IPressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {DOMAttributes, FocusableElement, PointerType, PressEvents} from '@react-types/shared';\nimport {focusWithoutScrolling, isVirtualClick, isVirtualPointerEvent, mergeProps, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {PressResponderContext} from './context';\nimport {RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<Element>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  activePointerId: any,\n  target: FocusableElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType,\n  userSelect?: string\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: DOMAttributes\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n  let propsRef = useRef<PressHookProps>(null);\n  propsRef.current = {onPress, onPressChange, onPressStart, onPressEnd, onPressUp, isDisabled, shouldCancelOnPointerExit};\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressStart, onPressChange, isDisabled} = propsRef.current;\n      if (isDisabled || state.didFirePressStart) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n      let {onPressEnd, onPressChange, onPress, isDisabled} = propsRef.current;\n      if (!state.didFirePressStart) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed && !isDisabled) {\n        onPress({\n          type: 'press',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let triggerPressUp = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressUp, isDisabled} = propsRef.current;\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let cancel = (e: EventBase) => {\n      if (state.isPressed) {\n        if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n      }\n    };\n\n    let pressProps: DOMAttributes = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target as Element)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n            e.preventDefault();\n          }\n          e.stopPropagation();\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        } else if (e.key === 'Enter' && isHTMLAnchorLink(e.currentTarget)) {\n          // If the target is a link, we won't have handled this above because we want the default\n          // browser behavior to open the link when pressing Enter. But we still need to prevent\n          // default so that elements above do not also handle it (e.g. table row).\n          e.stopPropagation();\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target as Element)) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e, state.target)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n\n        state.isPressed = false;\n        let target = e.target as Element;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target instanceof HTMLElement && state.target.contains(target) && (isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) {\n          state.target.click();\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as Element)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as Element) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget)) {\n          e.preventDefault();\n        }\n\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType);\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, state.pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as Element).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        restoreTextSelection(ref.current.target);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: Element): boolean {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent, currentTarget: Element): boolean {\n  const {key, code} = event;\n  const element = currentTarget as HTMLElement;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    !((element instanceof HTMLInputElement && !isValidInputKey(element, key)) ||\n      element instanceof HTMLTextAreaElement ||\n      element.isContentEditable) &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === 'button' && key !== 'Enter')) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: FocusableElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = (point.width / 2) || point.radiusX || 0;\n  let offsetY = (point.height / 2) || point.radiusY || 0;\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: Element) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: Element) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element, key: string) {\n  if (target instanceof HTMLInputElement) {\n    return !isValidInputKey(target, key);\n  }\n\n  if (target instanceof HTMLButtonElement) {\n    return target.type !== 'submit';\n  }\n\n  return true;\n}\n\nconst nonTextInputTypes = new Set([\n  'checkbox',\n  'radio',\n  'range',\n  'color',\n  'file',\n  'image',\n  'button',\n  'submit',\n  'reset'\n]);\n\nfunction isValidInputKey(target: HTMLInputElement, key: string) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio'\n    ? key === ' '\n    : nonTextInputTypes.has(target.type);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {ReactElement, RefObject, useRef} from 'react';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<DOMAttributes, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: RefObject<Element>) => {\n  let newRef = useRef();\n  ref = ref ?? newRef;\n  let {pressProps} = usePress({...props, ref});\n  let child = React.Children.only(children);\n  return React.cloneElement(\n    child,\n    // @ts-ignore\n    {ref, ...mergeProps(child.props, pressProps)}\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport {PressProps} from './usePress';\nimport {PressResponderContext} from './context';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\n\ninterface PressResponderProps extends PressProps {\n  children: ReactNode\n}\n\nexport const PressResponder = React.forwardRef(({children, ...props}: PressResponderProps, ref: RefObject<FocusableElement>) => {\n  let isRegistered = useRef(false);\n  let prevContext = useContext(PressResponderContext);\n  let context = mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || prevContext?.ref,\n    register() {\n      isRegistered.current = true;\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  });\n\n  useSyncRef(prevContext, ref);\n\n  useEffect(() => {\n    if (!isRegistered.current) {\n      console.warn(\n        'A PressResponder was rendered without a pressable child. ' +\n        'Either call the usePress hook, or wrap your DOM node with <Pressable> component.'\n      );\n    }\n  }, []);\n\n  return (\n    <PressResponderContext.Provider value={context}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useCallback, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\nexport class SyntheticFocusEvent implements ReactFocusEvent {\n  nativeEvent: FocusEvent;\n  target: Element;\n  currentTarget: Element;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as Element;\n    this.currentTarget = nativeEvent.currentTarget as Element;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent(onBlur: (e: ReactFocusEvent) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    onBlur,\n    observer: null as MutationObserver\n  });\n  stateRef.current.onBlur = onBlur;\n\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n\n  // This function is called during a React onFocus event.\n  return useCallback((e: ReactFocusEvent) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      stateRef.current.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler = (e: FocusEvent) => {\n        stateRef.current.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          stateRef.current.onBlur?.(new SyntheticFocusEvent('blur', e));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true}));\n        }\n      });\n\n      stateRef.current.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  }, []);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes, FocusEvents} from '@react-types/shared';\nimport {FocusEvent, useCallback} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusProps extends FocusEvents {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusResult {\n  /** Props to spread onto the target element. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus(props: FocusProps): FocusResult {\n  let {\n    isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange\n  } = props;\n\n  const onBlur: FocusProps['onBlur'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) {\n        onBlurProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(false);\n      }\n\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n\n\n  const onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n\n  const onFocus: FocusProps['onFocus'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) {\n        onFocusProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(true);\n      }\n\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n\n  return {\n    focusProps: {\n      onFocus: (!isDisabled && (onFocusProp || onFocusChange || onBlurProp)) ? onFocus : undefined,\n      onBlur: (!isDisabled && (onBlurProp || onFocusChange)) ? onBlur : null\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isMac, isVirtualClick} from '@react-aria/utils';\nimport {useEffect, useState} from 'react';\n\nexport type Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\nexport type FocusVisibleHandler = (isFocusVisible: boolean) => void;\nexport interface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\nlet hasBlurredWindowRecently = false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || (!isMac() && e.altKey) || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    currentModality = 'virtual';\n    triggerChangeHandlers('virtual', e);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalFocusEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalFocusEvents);\n  }\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return modality;\n}\n\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction isKeyboardFocusEvent(isTextInput: boolean, modality: Modality, e: HandlerEvent) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useFocusVisibleListener((isFocusVisible) => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {isTextInput});\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n\n/**\n * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).\n */\nexport function useFocusVisibleListener(fn: FocusVisibleHandler, deps: ReadonlyArray<any>, opts?: {isTextInput?: boolean}): void {\n  setupGlobalFocusEvents();\n\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      if (!isKeyboardFocusEvent(opts?.isTextInput, modality, e)) {\n        return;\n      }\n      fn(isFocusVisible());\n    };\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {FocusEvent, useCallback, useRef} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\nexport interface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: DOMAttributes\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let {\n    isDisabled,\n    onBlurWithin,\n    onFocusWithin,\n    onFocusWithinChange\n  } = props;\n  let state = useRef({\n    isFocusWithin: false\n  });\n\n  let onBlur = useCallback((e: FocusEvent) => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !(e.currentTarget as Element).contains(e.relatedTarget as Element)) {\n      state.current.isFocusWithin = false;\n\n      if (onBlurWithin) {\n        onBlurWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(false);\n      }\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n  let onFocus = useCallback((e: FocusEvent) => {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) {\n        onFocusWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(true);\n      }\n\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n\n  if (isDisabled) {\n    return {\n      focusWithinProps: {\n        onFocus: null,\n        onBlur: null\n      }\n    };\n  }\n\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {HoverEvents} from '@react-types/shared';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: DOMAttributes,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: DOMAttributes = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {RefObject, SyntheticEvent, useEffect, useRef} from 'react';\n\nexport interface InteractOutsideProps {\n  ref: RefObject<Element>,\n  onInteractOutside?: (e: SyntheticEvent) => void,\n  onInteractOutsideStart?: (e: SyntheticEvent) => void,\n  /** Whether the interact outside events should be disabled. */\n  isDisabled?: boolean\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useInteractOutside(props: InteractOutsideProps) {\n  let {ref, onInteractOutside, isDisabled, onInteractOutsideStart} = props;\n  let stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside,\n    onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n\n  useEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    let onPointerDown = (e) => {\n      if (isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) {\n          state.onInteractOutsideStart(e);\n        }\n        state.isPointerDown = true;\n      }\n    };\n\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = (e) => {\n        if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = (e) => {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = (e) => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  }\n\n  // if the event target is no longer in the document\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseEvent} from '@react-types/shared';\nimport {SyntheticEvent} from 'react';\n\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\nexport function createEventHandler<T extends SyntheticEvent>(handler: (e: BaseEvent<T>) => void): (e: T) => void {\n  if (!handler) {\n    return;\n  }\n\n  let shouldStopPropagation = true;\n  return (e: T) => {\n    let event: BaseEvent<T> = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createEventHandler} from './createEventHandler';\nimport {DOMAttributes, KeyboardEvents} from '@react-types/shared';\n\nexport interface KeyboardProps extends KeyboardEvents {\n  /** Whether the keyboard events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface KeyboardResult {\n  /** Props to spread onto the target element. */\n  keyboardProps: DOMAttributes\n}\n\n/**\n * Handles keyboard interactions for a focusable element.\n */\nexport function useKeyboard(props: KeyboardProps): KeyboardResult {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: createEventHandler(props.onKeyDown),\n      onKeyUp: createEventHandler(props.onKeyUp)\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {DOMAttributes, MoveEvents, PointerType} from '@react-types/shared';\nimport React, {useMemo, useRef} from 'react';\nimport {useGlobalListeners} from '@react-aria/utils';\n\nexport interface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: DOMAttributes\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let moveProps = useMemo(() => {\n    let moveProps: DOMAttributes = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart?.({\n          type: 'movestart',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent: EventBase, pointerType: PointerType) => {\n      restoreTextSelection();\n      if (state.current.didMove) {\n        onMoveEnd?.({\n          type: 'moveend',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n\n  return {moveProps};\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useCallback} from 'react';\nimport {ScrollEvents} from '@react-types/shared';\nimport {useEvent} from '@react-aria/utils';\n\nexport interface ScrollWheelProps extends ScrollEvents {\n  /** Whether the scroll listener should be disabled. */\n  isDisabled?: boolean\n}\n\n// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that\nexport function useScrollWheel(props: ScrollWheelProps, ref: RefObject<HTMLElement>): void {\n  let {onScroll, isDisabled} = props;\n  let onScrollHandler = useCallback((e) => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) {\n      return;\n    }\n\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onScroll) {\n      onScroll({deltaX: e.deltaX, deltaY: e.deltaY});\n    }\n  }, [onScroll]);\n\n  useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, LongPressEvent} from '@react-types/shared';\nimport {mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\nimport {useRef} from 'react';\n\nexport interface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\nexport interface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: DOMAttributes\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef(null);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = null;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}